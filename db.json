{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/my/小埋1.jpg","path":"img/my/小埋1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/my/logo.jpg","path":"img/my/logo.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/my/小埋2.jpg","path":"img/my/小埋2.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Java基础复盘.md","hash":"ca2c71e2e4691eaab1087f0bfc8dfcadf20a178a","modified":1739021956938},{"_id":"source/_posts/关于本站.md","hash":"c57481a377a14d26bd42fbe58f6c1fd6db8a44ee","modified":1738160402207},{"_id":"source/comment/index.md","hash":"675c98a90e366dfc9d3fefb47e8fb970f23e6a51","modified":1738051001684},{"_id":"source/_posts/图片显示测试.md","hash":"4625252fbf65d8be4d5bd26b9a0db9f933f23f66","modified":1739021785420},{"_id":"source/categories/index.md","hash":"03fac0b6976782e239a17c74ccad2b3b7db52aee","modified":1738051308972},{"_id":"source/link/index.md","hash":"cf5ff3c4efd6d21b85aef40c519fc8b88ebeda35","modified":1737787630167},{"_id":"source/_data/link.yml","hash":"82cfcde3bbf056782898cea15936b530d1161009","modified":1737786209949},{"_id":"source/_posts/我的第一篇文章.md","hash":"d7958954e6e4b95226eebf2ece2bce00a1820e27","modified":1738606712079},{"_id":"source/_posts/Java基础复盘/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1738389134046},{"_id":"source/_posts/图片显示测试/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1738389134046},{"_id":"source/_posts/图片显示测试/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1731397849613},{"_id":"source/_posts/Java基础复盘/image-20250207211115238.png","hash":"c86f78a236a7980a4a8a51d1432fba6d2dafb8bd","modified":1738933875267},{"_id":"source/_posts/Java基础复盘/image-20250207212537344.png","hash":"5182e1f9bac79d177a285abef70fb75b1896aaaa","modified":1738934737395},{"_id":"source/_posts/Java基础复盘/image-20250207222214122.png","hash":"a48b0b1d3d759fc8c512a4325ce0ba38186c90e4","modified":1738938134141},{"_id":"source/_posts/我的第一篇文章/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1731397849613},{"_id":"source/_posts/Java基础复盘/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1731397849613},{"_id":"source/movies/index.md","hash":"bb4b2a3f4719dd8a18c0e28fce011c11a31527bc","modified":1737787531594},{"_id":"source/music/index.md","hash":"ea8ef5d953aa84fb9fbae24b1b8e8c506d566306","modified":1737787468776},{"_id":"source/tags/index.md","hash":"41a48b541d461dc11d9ede30b89697b52db34baf","modified":1737786348570},{"_id":"source/_posts/Java基础复盘/image-20250207203153099.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1738931513156},{"_id":"source/_posts/Java基础复盘/image-20250207203028138.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1738931428193},{"_id":"source/_posts/Java基础复盘/image-20250207202641150.png","hash":"9e20ced6fb1a1a693fb232b04a31fb43d28f5ae9","modified":1738931201208},{"_id":"source/_posts/Java基础复盘/image-20250207230001660.png","hash":"04cd0052bec9e3068acf7239e48c6e93ae105dd4","modified":1738940401705},{"_id":"source/_posts/图片显示测试/image.png","hash":"60d56aea7bbb09d8e7b8804ac81508387ca06d04","modified":1738607520148},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"86230c5186a5a3f3584ee3df490f89d569123f49","modified":1737726812572},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"bf33e84dd7b48524eb728f1f2e419cb10a2c32c2","modified":1737726813406},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1737726813418},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"952ae1fb19d366ef93e291692d36d2381f6cc398","modified":1737726813423},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1737726813413},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1737726813422},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1737726813415},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1737726813420},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1737726813148},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1737726813179},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1737726813428},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1737726813431},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1737726813237},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1737726813429},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baddb5ff69a18e3fc0a144136b16a719eeb6e076","modified":1737726813259},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1737726813293},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"72f47de2492349c64ef148a519bc4cb90c55ece8","modified":1737726813266},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1737726812484},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"f099cbbd6bf34ee3e55b609a7b3960cd634263d0","modified":1737726812580},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1737726813416},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"324c8d65fff0107561cdb325743538ea0e7150f3","modified":1737726812575},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1737726813410},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"de6546392275195ecb52a1af62c54991ff9719ca","modified":1737726813136},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1737726813211},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"c9ab9bbfc688b87cfc2610ec888e062e06a71415","modified":1737726813220},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"393d2720e0887a1a0e68206a6d37205549535dd4","modified":1737726813244},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"5a641907c0390f1b068b7cb3e2e141f4db43892f","modified":1737726813261},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"7dbf86c92a81ed79dc9958005fe07094d5d34918","modified":1737726813280},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1737726812552},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1737726812501},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1737726812521},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"c588ea813c09bd12321e3e70bdbe1a21eb40f398","modified":1737726813285},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1737726813409},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1737726812532},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1737726812560},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1737726812525},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1737726812571},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"7a1329d40caf93b80c5e7e90c01d3db6feb13728","modified":1737726812543},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"4393a0e5ee97653496c0a1c273359005583a7eb7","modified":1737726812550},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"90f65e32a76f43fdd1ffae55775e300f6a3b1c02","modified":1737726812554},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"05da5331b442e9b4645b7d9584918b6e8128f086","modified":1737726812511},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"1d927577fb5eac0fff7b0ea386b20e70e411d4f1","modified":1737726813404},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1737726813373},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1737726812513},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1737726812534},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c207f1c02e2976fc0d125946fc1d98cf3d06b6f8","modified":1737726812548},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1737726812529},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1737726812555},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1737726812557},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1737726812517},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1737726812524},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"be7c992cb1da26466d5ba676064c81a43338ca6a","modified":1737726812528},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1737726812526},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"32c6b81c5f668fc72a94de27f71f65edefd773be","modified":1737726812530},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"1ce5fcce4d045a20f26821f0c773ce458fdf9769","modified":1737726812536},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"448bd8982547616bf5d5e1ddc71816913bbb7d05","modified":1737726812544},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1737726812537},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1737726812546},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1737726812556},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1737726812558},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1737726812561},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"b3807dd492bafe9a148c76adf408da1c6fb47b6b","modified":1737726812562},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1737726812497},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1737726812542},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1737726813425},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1737726813126},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1737726812568},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"c97ec4a5225f2236377b2ca3b296031f64c72e44","modified":1737726813255},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"dcfc63e62d3d58e581ad3ad77daa3fb03472d1ab","modified":1737726813144},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9f04f61fdd0a91874ad84b3963ae4e88bfb2b546","modified":1737726813191},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1737726812493},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"111b1300efddf0743d8744822b3858a8dc311ed2","modified":1737726813189},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1737726813219},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"ad56f4bc914b6d6b5ca481dd95988043abb29914","modified":1737726813268},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1737726813270},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1737726813287},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1737726813289},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"cbe55f1c3c33828f0b3a8812829c19ee50399ce6","modified":1737726813222},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"dbc2643d8b01de535ac498badefd5152bcd9c2d7","modified":1737726813253},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1737726813250},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1737726813288},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1737726813265},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1737726813213},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1737726813223},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1737726813257},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"c67609f1c04c8b7b966f838f265feaf7ba9a2883","modified":1737726813239},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1737726813157},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1737726813130},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1737726813178},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1737726813426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1737726813193},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"98f004c78c99d92d526b1f61c29c6e84ec3d7a34","modified":1737726813210},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1737726813284},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1737726813256},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1737726812495},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1737726813264},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1737726813294},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1737726813146},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1737726813279},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1737726813205},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1737726813269},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1737726813262},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1737726813291},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"0d257d38cb150b9b2696aa2d058e9d277cfdf3d7","modified":1737726813302},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1737726813159},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1737726813162},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"5012e9cca9c1ce8c379d407f4ff426e297fd1ffe","modified":1737726813164},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1737726813160},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1737726813166},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1737726813165},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1737726813168},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1737726813170},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1737726813175},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"ff38e96f336a6c85ecb0ef015973980a11fc83f5","modified":1737726813171},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1737726813173},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"e4eb905a53da498d5b036d4ab78a486a3cc77aa3","modified":1737726813177},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1737726813176},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1737726813363},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"3727d13b339134e037f30f5d7e9af9ec243f0ff1","modified":1737726813236},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1737726813354},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1737726813367},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1737726813400},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1737726813331},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1737726813325},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1737726813332},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1737726813357},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1737726813351},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1737726813378},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1737726813384},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1737726813387},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1737726813389},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1737726813390},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1737726813395},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1737726813402},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"559e7cacb6e6911a064637fee0288fdcf0082a4b","modified":1737726813383},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1737726813314},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1737726813386},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1737726813337},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1737726813319},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1737726813333},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1737726813329},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"b02e88bb5dafcef11be4669da6cd9cddbf9a852a","modified":1737726813350},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1737726813364},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1737726813393},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1737726813398},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1737726813328},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1737726813371},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1737726813380},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1737726813356},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1737726813358},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1737726813360},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1737726813376},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1737726813374},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1737726813381},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1737726813391},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1737726812487},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1737726813396},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1737726813403},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1737726812538},{"_id":"node_modules/hexo-theme-butterfly/source/img/my/小埋1.jpg","hash":"255f5431c3d1ee89340776dab1dbb8922efbf10c","modified":1737788932820},{"_id":"node_modules/hexo-theme-butterfly/source/img/my/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1731397849613},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1737726812564},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1737726813133},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"97e81321fe7991831bb5cd189402af477a0e5a73","modified":1737726813225},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"ce9f21e5d599733089a91d655ea980970b87456d","modified":1737726813152},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"5320f74b711aa2732ee0a506da08abef41c0c5ac","modified":1737726813197},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2cf6ce7a703197f0d8991f3416cbc47b7250734a","modified":1737726813199},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"817902fe7f3c42d6fca1253afd83583ec4b9f90c","modified":1737726813207},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9b0df2082ac11ad85471ff70e79c03b58c916677","modified":1737726813215},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1737726813229},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"67b67c46734eb82141ee1c827b8a71fea0945b2c","modified":1737726813216},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1737726813240},{"_id":"node_modules/hexo-theme-butterfly/source/img/my/小埋2.jpg","hash":"a56b44d26bbde53d57757e2c441624516125f02f","modified":1737789018192},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"0dc016c759b3b90449b1076307c390fcba6052f6","modified":1737726813245},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"566848e4f7b857af7cd01fc72952b49101955d0a","modified":1737726813275},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"3fdb4d12fa7440466720b24d19b12b06f53d35e1","modified":1737726813301},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1737726813317},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"5c97558d4d9109b5f9aff5bef5665cfbe3938c50","modified":1737726813305},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b17416a1a76c58651757d9b80e4f6715de636342","modified":1737726813303},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"b99a94de9a6bda59d6977b3b693d0e369123d727","modified":1737726813310},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1737726813195},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1737726813150},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1737726813226},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5ba53d5c671c723754c2d0133016005b2af789a9","modified":1737726813185},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1737726813209},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1737726813272},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"dc02a84f6e0ab3d86f410c6ba7cb6f7b277eb1a4","modified":1737726813192},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1737726813299},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1737726813304},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1737726813308},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd0af44547211520c10953f3023e22a26025aaf9","modified":1737726813296},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1737726813227},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"516dae8e5dad4ace61333cb4df8ae70a8a9acbec","modified":1737726813183},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b771c0de03a70d4fc2d98bb3e2ebc069033ff5eb","modified":1737726813231},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1737726813242},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5fc8f74c6a04f0c219a52c9768c5f19119b80ef7","modified":1737726813248},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1737726813251},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9e1fd1f5703e133682dea92a0c91cf7058207868","modified":1737726813155},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"366273efa0d6fc7386e4acafa32ea92d7efe4464","modified":1737726813187},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1737726813235},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1737726813138},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1737726813282},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"f40e18bdf470f76ff7063cf42016c58d75d06c24","modified":1737726813218},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"e7e05cc32322f381077624599adc2e64486310a8","modified":1737726813194},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"39b620c7b2cf5f4527df547b1777fbcb7508a525","modified":1737726813277},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"2af8902b0e8c336633ce3ee444a44b23028bacee","modified":1737726813233},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"154ec9bcce19bc3a90771d8d55aff5ae14b5bee2","modified":1737726813297},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"fc1f9d0655a94bfc76e5542207d1991e5d24690a","modified":1737726813307},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e90902290515310480e376d6ea74c0be82fc03d8","modified":1737726813141},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"88aef4170336282bc988ab64c9b5ec8f5272a62c","modified":1737726813311},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1737726813201},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1737726813233},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1737726813247},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1737726812504},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1737726813343},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1737726813377},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1737726813368},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1737726813369},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1737726813348},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1737726813121}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}],"Page":[{"title":"标签","date":"2025-01-25T06:00:00.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2025-01-25 14:00:00\n---","updated":"2025-01-28T08:01:48.972Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm6w8oem40000m4ot3uyz2ixm","content":"","excerpt":"","more":""},{"title":"友链","date":"2025-01-25T06:21:57.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2025-01-25 14:21:57\ntype: \"link\"\n---\n","updated":"2025-01-25T06:47:10.167Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm6w8oema0002m4ot4g00aaw8","content":"","excerpt":"","more":""},{"title":"留言板","date":"2025-01-28T06:00:00.000Z","_content":"","source":"comment/index.md","raw":"---\ntitle: 留言板\ndate: 2025-01-28 14:00:00\n---","updated":"2025-01-28T07:56:41.684Z","path":"comment/index.html","comments":1,"layout":"page","_id":"cm6w8oemc0004m4oteg7k4rfk","content":"","excerpt":"","more":""},{"title":"影片","date":"2025-01-25T06:00:00.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: 影片\ndate: 2025-01-25 14:00:00\n---","updated":"2025-01-25T06:45:31.594Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cm6w8oemd0006m4ot8hxt3m3j","content":"","excerpt":"","more":""},{"title":"音乐","date":"2025-01-25T06:00:00.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2025-01-25 14:00:00\n---","updated":"2025-01-25T06:44:28.776Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm6w8oeme0008m4oterc2fztb","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-01-25T06:16:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-01-25 14:16:29\ntype: \"tags\"\n---\n","updated":"2025-01-25T06:25:48.570Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm6w8oeme0009m4otaq8tef1r","content":"","excerpt":"","more":""}],"Post":[{"title":"关于本站","date":"2025-01-28T16:00:00.000Z","updated":"2025-01-28T16:00:00.000Z","_content":"\n# 特别感谢\n本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  \n- [@康文昌](https://space.bilibili.com/34786453)\n- [@Fomalhaut](https://space.bilibili.com/220757832)\n- [@木子dn](https://space.bilibili.com/1398826277)\n- [@阿巴In](https://space.bilibili.com/381992209)\n","source":"_posts/关于本站.md","raw":"---\ntitle: 关于本站\ndate: 2025-01-29\nupdated: 2025-01-29\n---\n\n# 特别感谢\n本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  \n- [@康文昌](https://space.bilibili.com/34786453)\n- [@Fomalhaut](https://space.bilibili.com/220757832)\n- [@木子dn](https://space.bilibili.com/1398826277)\n- [@阿巴In](https://space.bilibili.com/381992209)\n","slug":"关于本站","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6w8oem70001m4ot2zc27jdp","content":"<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  </p>\n<ul>\n<li><a href=\"https://space.bilibili.com/34786453\">@康文昌</a></li>\n<li><a href=\"https://space.bilibili.com/220757832\">@Fomalhaut</a></li>\n<li><a href=\"https://space.bilibili.com/1398826277\">@木子dn</a></li>\n<li><a href=\"https://space.bilibili.com/381992209\">@阿巴In</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  </p>\n<ul>\n<li><a href=\"https://space.bilibili.com/34786453\">@康文昌</a></li>\n<li><a href=\"https://space.bilibili.com/220757832\">@Fomalhaut</a></li>\n<li><a href=\"https://space.bilibili.com/1398826277\">@木子dn</a></li>\n<li><a href=\"https://space.bilibili.com/381992209\">@阿巴In</a></li>\n</ul>\n"},{"title":"Java基础复盘","date":"2025-02-03T16:00:00.000Z","updated":"2025-02-07T16:00:00.000Z","_content":"\n## 一、Java概述\n\n### 1.Java定义\n\n由Sun公司于1995发布的一种编程语言和计算平台。\n\n主要分为三个版本：JavaSE---标准版，JavaEE---企业版，JavaME---微型版。\n\n### 2.Java特点\n\n1.**面向对象**，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。\n\n2.**静态语言**。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。\n\n3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。\n\n4.**容易实现多线程**。在用户空间中实现多线程。\n\n5.**高性能**。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。\n\n6.**自动管理对象的生命周期**。安全。\n\n7.功能强大和简单易用。\n\n## 二、Java开发环境\n\nJDK包括jre和核心类库。jre包括jvm。\n\njre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。\n\n## 三、Java基础语法\n\n### 1.数据类型\n\n四类八种：\n\n1.整数型：\nbyte一个字节即8位(-128~127)，\nshort两个字节即16位(-32768~32767)，\nint4个字节即32位(-2147283648~2147483647)，\nlong八个字节即64位(-9e18-9e18)---后加L\n\n2.浮点型：\nfloat4字节即32位---精确到到小数点后六位---后加f，\ndouble8字节即64位精确到小数点后15位---后加d。\n\n3.字符型：\nchar类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。\n\n4.布尔型Boolean类型：只有true或false。\n\n### 2.基础语法\n\n1.大小写敏感\n\n2.类名采用大驼峰命名法(即MyClass类似的)\n\n3.包名小写(网址倒序)\n\n4方法名采用小驼峰命名法(即myFirstMethod类似的)\n\n### 3.运算符\n\n1.**赋值运算符’=‘**，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：\n\n- **浅拷贝**：复制对象的字段值，但引用类型的字段仍然指向同一个对象。\n\n- **深拷贝**：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。  \n\n2.自增自减运算符：\n\n![](Java基础复盘/image-20250201135214019.png)\n\n3.算数运算符与比较运算符和数学差不多\n\n4.逻辑运算符与数学差不多，按位运算符比较的是二进制位\n\n5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：\n\n​\t8>>1=4;9<<2=36;\n\n6.三元运算符：语法为：\n\n​\t**条件表达式？表达式1：表达式2**\n\n条件表达式为true就调用表达式1，否则调用表达式2.\n\n\n\n## 四、Java执行流程控制\n\n### 1.条件语句\n\n1.if...else\n\n`if(表达式) {`\n\n​\t`表达式为真执行；`\n\n`}`\n\n`else {`\n\n​\t`否则执行`\n\n`}`\n\n2.switch用于小范围单个值\n\n`switch(变量) {`\n\n​\t`case 值1：`\n\n​\t\t`表达式1；`\n\n​\t\t`break；`\n\n​\t`case 值2：`\n\n​\t\t`表达式2：`\n\n​\t\t`break；`\n\n​\t`......`\n\n​\t`default：`\n\n​\t\t`表达式n;`\n\n​\t\t`break;`\n\n`}`\n\n注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的`case`开始执行，直到遇到`break`语句或`switch`块的末尾为止，而不会自动停止。\n\n### 2.循环语句\n\nwhile，do...while，for和for-each\n\nwhile(表达式) {\n\n​\t为真执行并再次调用while()；\n\n}\n\ndo {\n\n​\t第一次直接执行，后续满足表达式执行；\n\n}while(表达式)；\n\nfor( 初始化;条件 ;步进 ) { 条件为真执行}\n\nfor-each例如:\n\n​\tint array[]={1,2,3}\n\n​\tfor(auto arr: array) {\n\n​\t\tSystem.out.println(arr);\n\n​\t}\n\n打印数组。\n\n### 3.跳转语句\n\n有break，continue和return\n\nbreak用于退出当前循环\n\ncontinue用于退出当次循环进入下一次循环\n\nreturn直接结束本次函数调用\n\n## 五、面向对象\n\n### 1.类和对象\n\n类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。\n\n### 2.对象的创建\n\n1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：\n\n`Car carKey；`\n\n但是我们一般在创建对象引用时会同时把一个对象赋给它如：\n\n`Car carKey = new Car();`\n\n### 3.属性和方法\n\n属性也被称为字段，属性可以是对象，也可以是基本数据类型。\n\n方法也就是函数，意思是做某些事情。\n\n方法的示例：\n\n访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){\n\n​\t方法体;\n\n} \n\n如果没有指定修饰符默认同包访问权限(package-private)；\n\n#### (1)构造方法\n\n构造方法也称构造器，构造函数，它是一种特殊的方法。\n\n特点：\n\n1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。\n\n2.它的方法名称必须和类名相同，\n\n3.没有返回值类型(连void都没有)。\n\n4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。\n\n5.可以重载，只要参数列表不同。\n\n6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。\n\n7.构造方法不能被继承或重写，但可以通过`super()`调用父类的构造方法。\n\n#### (2)方法重载\n\n方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。\n\n#### (3)方法的重写\n\n方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。\n\n要实现方法重写，必须满足以下条件：\n\n1. **继承关系**：子类必须继承父类。\n2. **方法名和参数列表相同**：子类中的方法必须与父类中的方法具有相同的名称和参数列表。\n3. **返回值类型相同或兼容**：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。\n4. **访问修饰符的限制**：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是`public`，子类方法不能是`protected`或`private`。\n5. **异常声明的限制**：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。\n\n### 4.初始化\n\n在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：\n\n#### (1) 类的初始化\n\n类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：\n\n- **加载**：将类的`.class`文件加载到JVM内存中。\n- **连接**：\n  - **验证**：检查类的结构是否正确，是否符合Java规范。\n  - **准备**：为类的静态变量分配内存，并设置默认初始值。\n  - **解析**：将类、接口、字段和方法的符号引用转换为直接引用。\n- **初始化**：执行类构造器`<clinit>`方法，完成静态变量的赋值和静态代码块的执行。\n\n**示例**：\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块执行\");\n    }\n    static int staticVar = 10;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MyClass.staticVar); // 触发类的初始化\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块执行\n10\n```\n\n#### (2) 成员初始化\n\n成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：\n\n- **默认初始化**：由JVM自动为成员变量赋予默认值。例如，`int`类型默认为`0`，`double`类型默认为`0.0`，`boolean`类型默认为`false`，对象引用类型默认为`null`。\n- **显式初始化**：在成员变量声明时直接赋值。\n- **构造器初始化**：通过构造器为成员变量赋值。\n\n**示例**：\n\n```java\nclass MyClass {\n    int instanceVar = 10; // 显式初始化\n    static int staticVar = 20; // 显式初始化\n    int anotherVar; // 默认初始化为0\n}\n```\n\n#### (3) 构造器初始化\n\n构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    int instanceVar;\n\n    // 构造器\n    public MyClass(int value) {\n        instanceVar = value; // 构造器初始化\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(100);\n        System.out.println(obj.instanceVar); // 输出100\n    }\n}\n```\n\n#### (4) 数组初始化\n\n数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：\n\n- **静态初始化**：在声明数组时直接指定数组元素的值。\n- **动态初始化**：指定数组的长度，由JVM自动为数组元素赋予默认值。\n\n**示例**：\n\njava复制\n\n```java\n// 静态初始化\nint[] arr1 = {1, 2, 3, 4, 5};\n\n// 动态初始化\nint[] arr2 = new int[5]; // 默认初始化为0\n```\n\n#### (5) 初始化顺序\n\nJava中对象的初始化顺序如下：\n\n1. **加载类**：加载类的`.class`文件。\n2. **静态变量和静态方法块初始化**：按照代码的顺序，先初始化静态变量，再执行静态代码块。\n3. **实例变量初始化**：按照代码的顺序，先初始化实例变量，再执行实例代码块。\n4. **构造器初始化**：执行构造器，为对象的成员变量赋值。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块1\");\n    }\n\n    static int staticVar = 10; // 静态变量初始化\n\n    {\n        System.out.println(\"实例代码块1\");\n    }\n\n    int instanceVar = 20; // 实例变量初始化\n\n    public MyClass() {\n        System.out.println(\"构造器\");\n    }\n\n    static {\n        System.out.println(\"静态代码块2\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块1\n静态代码块2\n实例代码块1\n构造器\n```\n\n### 总结\n\n- **类初始化**：加载类、静态变量初始化和执行静态代码块。\n- **成员初始化**：包括默认初始化、显式初始化和构造器初始化。\n- **构造器初始化**：通过构造器为对象的成员变量赋值。\n- **数组初始化**：静态初始化和动态初始化。\n- **初始化顺序**：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。\n\n### 5.对象的销毁\n\nJava和c/c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由**Java虚拟机**进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。\n\n#### (1)对象作用域\n\n绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。\n\n`{`\n\n​\t`int a = 11;`\n\n​\t`{`\n\n​\t\t`int b = 22;`\n\n​\t`}`\n\n`}`\n\n变量a会在两个{}中生效，而变量b只在自己的{}内生效。\n\n#### (2)this和super\n\n二者都是关键字。\n\n**this**作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。\n\n调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。![](Java基础复盘/image-20250207203153099.png)\n\nthis用在构造方法时this(参数)需要放在第一行，否则编译不通过。\n\n**super**可以调用父类的方法，属性，指向父类。其他同this。\n\n## 六、访问控制权限\n\n访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。\n\nJava中成员的访问权限一共有四种，分别是public，protected，default，private。如下\n\n![image-20250207211115238](Java基础复盘/image-20250207211115238.png)\n\n### 1.继承\n\n三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。\n\n![image-20250207212537344](Java基础复盘/image-20250207212537344.png)\n\n继承的关键字是**extends**，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：\n\n`class Father{}`\n\n`class Son extends Father{}`\n\n子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。\n\n### 2.多态\n\n三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。\n\n如何实现多态？达成三个充要条件：\n\n- 继承\n- 重写父类方法\n- 父类引用指向子类对象  \n\n比如以下代码：\n\n```java\nclass Fruit{\n    int num;\n\n    public void eat() {\n        System.out.println(\"eat Fruit\");\n    }\n}\nclass Pear extends Fruit{\n    @Override\n    public void eat() {\n        super.num = 10;\n        System.out.println(\"eat\"+num+\"Pear\");\n    }\n}\n\npublic class DuoTai {\n    public static void main(String[] args) {\n        Fruit fruit = new Pear();\n        fruit.eat();\n    }\n}\n```\n\n可以发现main方法中Fruit fruit = new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态->父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。\n\n### 3.组合\n\n组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话**多用组合，少用继承**。二者关系如下：\n\n![image-20250207222214122](Java基础复盘/image-20250207222214122.png)\n\n### 4.代理\n\n代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下代码：\n\n![image-20250207230001660](Java基础复盘/image-20250207230001660.png)\n\n在实际应用中，代理模式可以用于多种场景，例如：\n\n- **远程代理**：为远程对象提供本地代表，以便在不同地址空间中的对象可以像调用本地对象一样调用远程对象。\n- **虚拟代理**：延迟创建开销较大的对象，直到真正需要时才创建。\n- **保护代理**：控制对原始对象的访问，例如，只允许特定用户访问某些方法。\n- **智能引用**：在访问对象时执行额外操作，例如，引用计数、加载持久对象等。\n\n### 5.向上转型\n\n向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。\n\n向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。\n\n向下转型相反而且不是自动完成，需要强制指定。\n\n### 6.statics\n\n`static` 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 `static` 关键字的一些主要用途：\n\n- **静态变量**：定义类的全局变量，所有实例共享。\n- **静态方法**：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。\n- **静态初始化块**：用于初始化静态变量，当类被加载时执行一次。提示程序性能。\n\n### 7.final\n\n`final` 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 `final` 关键字的一些主要用途：\n\n- **最终变量**：一旦被初始化，其值就不能被改变。\n- **最终方法**：不能被子类重写。\n- **最终类**：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。\n\n## 七、接口和抽象类\n\n在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于**定义规范和提供代码复用**，但它们在功能、用途和语法上有很大的区别。\n\n### 一、定义\n\n1. **接口(Interface)**\n   - 接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 `public` 和 `abstract` 的，字段默认是 `public static final` 的。\n   - 接口的目的是定义一组行为规范，**任何实现了该接口的类都必须实现接口中定义的所有方法**。\n   - 接口可以被多个类实现，从而实现多继承的效果。\n2. **抽象类(Abstract Class)**\n   - 抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。\n   - 抽象类的主要目的是**为子类提供一个通用的模板**，**子类必须实现抽象类中的所有抽象方法**。\n   - 抽象类只能被单个类继承，不能实现多继承。\n\n### 二、区别\n\n1. **方法实现**\n   - **接口**：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(`default`)和静态方法(`static`)，但这些方法的使用场景相对有限。\n   - **抽象类**：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。\n2. **字段**\n   - **接口**：接口中的字段默认是 `public static final` 的，即常量。它们必须在声明时初始化，且不能被修改。\n   - **抽象类**：抽象类可以包含普通字段(实例变量)，这些字段可以是 `public`、`protected` 或 `private` 的，也可以是静态的或非静态的。\n3. **继承和实现**\n   - **接口**：一个类可以实现多个接口。这是实现多继承的一种方式。\n   - **抽象类**：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。\n4. **构造方法**\n   - **接口**：接口不能有构造方法，因为接口不能被实例化。\n   - **抽象类**：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。\n5. **实例化**\n   - **接口**：接口不能被实例化。\n   - **抽象类**：抽象类也不能被实例化，但可以通过子类来实例化。\n\n### 三、使用场景\n\n1. **接口**\n   - 当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 `Animal` 接口，其中包含 `eat()` 和 `move()` 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。\n   - 当**需要实现多继承时**，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。\n2. **抽象类**\n   - 当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 `Vehicle` 抽象类，其中包含 `move()` 抽象方法和一些通用字段(如 `speed`、`color` 等)，然后让 `Car`、`Bike` 等子类继承并实现具体的行为。\n   - 当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。\n\n## 八、异常\n\nException位于**java.lang**包下，它是一种顶级接口，继承于**Throwable**类，**Throwable类是Java语言中所以错误(error)和异常(exception)类的父类**。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。\n\n在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。\n\n### 一、异常的分类\n\nJava中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。\n\n1. **受检查的异常(Checked Exception)**\n   - 这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(`FileNotFoundException`)、网络连接失败(`IOException`)等。\n   - 受检查的异常必须在代码中显式处理，否则编译器会报错。\n   - 受检查的异常继承自`Exception`类，但不包括`RuntimeException`及其子类。\n2. **非受检查的异常(Unchecked Exception)**\n   - 这些异常是程序逻辑错误或运行时错误，例如空指针异常(`NullPointerException`)、数组越界异常(`ArrayIndexOutOfBoundsException`)等。\n   - 非受检查的异常继承自`RuntimeException`类，编译器不会强制要求处理这些异常。\n   - 但为了程序的健壮性，通常也会对这些异常进行捕获和处理。\n3. **错误(Error)**\n   - 错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(`VirtualMachineError`)、线程死亡(`ThreadDeath`)等。\n   - 错误继承自`Error`类，通常不需要程序员处理，因为它们通常表示系统级别的问题。\n\n### 二、异常处理机制\n\nJava提供了以下几种机制来处理异常：\n\n1. **try-catch**\n   - `try`块用于包裹可能会抛出异常的代码，`catch`块用于捕获和处理异常。\n   - 可以有多个`catch`块来捕获不同类型的异常。\n2. **finally**\n   - `finally`块用于在`try-catch`块执行完毕后执行清理操作，无论是否捕获到异常，`finally`块都会执行。\n   - 常用于关闭文件流、释放资源等操作。\n3. **throw**\n   - `throw`关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。\n4. **throws**\n   - `throws`关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。\n\n### 三、异常处理的流程\n\n1. **抛出异常**\n   - 当程序运行时遇到错误，会创建一个异常对象并抛出。\n   - 异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。\n2. **捕获异常**\n   - 使用`try-catch`块捕获异常，捕获到异常后可以在`catch`块中进行处理。\n3. **处理异常**\n   - 在`catch`块中可以记录日志、提示用户、尝试恢复等操作。\n4. **清理资源**\n   - 使用`finally`块进行资源清理，确保资源被正确释放。\n\n### 四、示例代码\n\n以下是一个简单的Java异常处理示例：\n\n```java\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        try {\n            // 可能会抛出异常的代码\n            int result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            // 捕获并处理特定类型的异常\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            // 捕获其他类型的异常\n            System.out.println(\"General Error: \" + e.getMessage());\n        } finally {\n            // 无论是否捕获到异常，finally块都会执行\n            System.out.println(\"Finally block executed.\");\n        }\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### 五、自定义异常\n\nJava允许程序员定义自己的异常类，自定义异常类通常继承自`Exception`类或其子类。自定义异常可以提供更具体的错误信息。\n\n```java\npublic class MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            checkAge(15);\n        } catch (MyCustomException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n\n    public static void checkAge(int age) throws MyCustomException {\n        if (age < 18) {\n            throw new MyCustomException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Age is valid.\");\n    }\n}\n```\n\n### 六、如何实践\n\n1. **明确异常的用途**\n   - 受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。\n2. **合理使用`try-catch`**\n   - 不要捕获所有异常，只捕获需要处理的异常。\n3. **避免空的`catch`块**\n   - 捕获异常后应该进行处理，而不是忽略异常。\n4. **使用`finally`块清理资源**\n   - 确保资源被正确释放，避免资源泄漏。\n5. **自定义异常**\n   - 当系统提供的异常类不足以描述错误时，可以定义自定义异常。\n\n### 七、异常处理的优缺点\n\n**优点**\n\n- 提高程序的健壮性，避免程序因错误而崩溃。\n- 提供详细的错误信息，方便调试和修复。\n- 可以通过异常处理机制实现程序的容错机制。\n\n**缺点**\n\n- 异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。\n- 如果滥用异常处理机制，可能会导致程序性能下降。\n\n总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。\n\n## 九、内部类\n\n### 1.创建内部类\n\n## 十、集合\n\n### 1.iterable接口\n\n### 2.顶层接口\n\n### 3.collections类\n\n### 4.集合实现类特征图\n\n## 十一、泛型\n\n## 十二、反射\n\n## 十三、枚举\n\n## 十四、I/O\n\n### 1.File类\n\n### 2.基础IO类和相关方法\n\n## 十五、注解\n\n## 十六、关于null的几种处理方式\n\n","source":"_posts/Java基础复盘.md","raw":"---\ntitle: Java基础复盘\ndate: 2025-02-04\nupdated: 2025-02-08\n---\n\n## 一、Java概述\n\n### 1.Java定义\n\n由Sun公司于1995发布的一种编程语言和计算平台。\n\n主要分为三个版本：JavaSE---标准版，JavaEE---企业版，JavaME---微型版。\n\n### 2.Java特点\n\n1.**面向对象**，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。\n\n2.**静态语言**。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。\n\n3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。\n\n4.**容易实现多线程**。在用户空间中实现多线程。\n\n5.**高性能**。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。\n\n6.**自动管理对象的生命周期**。安全。\n\n7.功能强大和简单易用。\n\n## 二、Java开发环境\n\nJDK包括jre和核心类库。jre包括jvm。\n\njre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。\n\n## 三、Java基础语法\n\n### 1.数据类型\n\n四类八种：\n\n1.整数型：\nbyte一个字节即8位(-128~127)，\nshort两个字节即16位(-32768~32767)，\nint4个字节即32位(-2147283648~2147483647)，\nlong八个字节即64位(-9e18-9e18)---后加L\n\n2.浮点型：\nfloat4字节即32位---精确到到小数点后六位---后加f，\ndouble8字节即64位精确到小数点后15位---后加d。\n\n3.字符型：\nchar类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。\n\n4.布尔型Boolean类型：只有true或false。\n\n### 2.基础语法\n\n1.大小写敏感\n\n2.类名采用大驼峰命名法(即MyClass类似的)\n\n3.包名小写(网址倒序)\n\n4方法名采用小驼峰命名法(即myFirstMethod类似的)\n\n### 3.运算符\n\n1.**赋值运算符’=‘**，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：\n\n- **浅拷贝**：复制对象的字段值，但引用类型的字段仍然指向同一个对象。\n\n- **深拷贝**：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。  \n\n2.自增自减运算符：\n\n![](Java基础复盘/image-20250201135214019.png)\n\n3.算数运算符与比较运算符和数学差不多\n\n4.逻辑运算符与数学差不多，按位运算符比较的是二进制位\n\n5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：\n\n​\t8>>1=4;9<<2=36;\n\n6.三元运算符：语法为：\n\n​\t**条件表达式？表达式1：表达式2**\n\n条件表达式为true就调用表达式1，否则调用表达式2.\n\n\n\n## 四、Java执行流程控制\n\n### 1.条件语句\n\n1.if...else\n\n`if(表达式) {`\n\n​\t`表达式为真执行；`\n\n`}`\n\n`else {`\n\n​\t`否则执行`\n\n`}`\n\n2.switch用于小范围单个值\n\n`switch(变量) {`\n\n​\t`case 值1：`\n\n​\t\t`表达式1；`\n\n​\t\t`break；`\n\n​\t`case 值2：`\n\n​\t\t`表达式2：`\n\n​\t\t`break；`\n\n​\t`......`\n\n​\t`default：`\n\n​\t\t`表达式n;`\n\n​\t\t`break;`\n\n`}`\n\n注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的`case`开始执行，直到遇到`break`语句或`switch`块的末尾为止，而不会自动停止。\n\n### 2.循环语句\n\nwhile，do...while，for和for-each\n\nwhile(表达式) {\n\n​\t为真执行并再次调用while()；\n\n}\n\ndo {\n\n​\t第一次直接执行，后续满足表达式执行；\n\n}while(表达式)；\n\nfor( 初始化;条件 ;步进 ) { 条件为真执行}\n\nfor-each例如:\n\n​\tint array[]={1,2,3}\n\n​\tfor(auto arr: array) {\n\n​\t\tSystem.out.println(arr);\n\n​\t}\n\n打印数组。\n\n### 3.跳转语句\n\n有break，continue和return\n\nbreak用于退出当前循环\n\ncontinue用于退出当次循环进入下一次循环\n\nreturn直接结束本次函数调用\n\n## 五、面向对象\n\n### 1.类和对象\n\n类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。\n\n### 2.对象的创建\n\n1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：\n\n`Car carKey；`\n\n但是我们一般在创建对象引用时会同时把一个对象赋给它如：\n\n`Car carKey = new Car();`\n\n### 3.属性和方法\n\n属性也被称为字段，属性可以是对象，也可以是基本数据类型。\n\n方法也就是函数，意思是做某些事情。\n\n方法的示例：\n\n访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){\n\n​\t方法体;\n\n} \n\n如果没有指定修饰符默认同包访问权限(package-private)；\n\n#### (1)构造方法\n\n构造方法也称构造器，构造函数，它是一种特殊的方法。\n\n特点：\n\n1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。\n\n2.它的方法名称必须和类名相同，\n\n3.没有返回值类型(连void都没有)。\n\n4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。\n\n5.可以重载，只要参数列表不同。\n\n6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。\n\n7.构造方法不能被继承或重写，但可以通过`super()`调用父类的构造方法。\n\n#### (2)方法重载\n\n方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。\n\n#### (3)方法的重写\n\n方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。\n\n要实现方法重写，必须满足以下条件：\n\n1. **继承关系**：子类必须继承父类。\n2. **方法名和参数列表相同**：子类中的方法必须与父类中的方法具有相同的名称和参数列表。\n3. **返回值类型相同或兼容**：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。\n4. **访问修饰符的限制**：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是`public`，子类方法不能是`protected`或`private`。\n5. **异常声明的限制**：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。\n\n### 4.初始化\n\n在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：\n\n#### (1) 类的初始化\n\n类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：\n\n- **加载**：将类的`.class`文件加载到JVM内存中。\n- **连接**：\n  - **验证**：检查类的结构是否正确，是否符合Java规范。\n  - **准备**：为类的静态变量分配内存，并设置默认初始值。\n  - **解析**：将类、接口、字段和方法的符号引用转换为直接引用。\n- **初始化**：执行类构造器`<clinit>`方法，完成静态变量的赋值和静态代码块的执行。\n\n**示例**：\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块执行\");\n    }\n    static int staticVar = 10;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MyClass.staticVar); // 触发类的初始化\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块执行\n10\n```\n\n#### (2) 成员初始化\n\n成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：\n\n- **默认初始化**：由JVM自动为成员变量赋予默认值。例如，`int`类型默认为`0`，`double`类型默认为`0.0`，`boolean`类型默认为`false`，对象引用类型默认为`null`。\n- **显式初始化**：在成员变量声明时直接赋值。\n- **构造器初始化**：通过构造器为成员变量赋值。\n\n**示例**：\n\n```java\nclass MyClass {\n    int instanceVar = 10; // 显式初始化\n    static int staticVar = 20; // 显式初始化\n    int anotherVar; // 默认初始化为0\n}\n```\n\n#### (3) 构造器初始化\n\n构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    int instanceVar;\n\n    // 构造器\n    public MyClass(int value) {\n        instanceVar = value; // 构造器初始化\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(100);\n        System.out.println(obj.instanceVar); // 输出100\n    }\n}\n```\n\n#### (4) 数组初始化\n\n数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：\n\n- **静态初始化**：在声明数组时直接指定数组元素的值。\n- **动态初始化**：指定数组的长度，由JVM自动为数组元素赋予默认值。\n\n**示例**：\n\njava复制\n\n```java\n// 静态初始化\nint[] arr1 = {1, 2, 3, 4, 5};\n\n// 动态初始化\nint[] arr2 = new int[5]; // 默认初始化为0\n```\n\n#### (5) 初始化顺序\n\nJava中对象的初始化顺序如下：\n\n1. **加载类**：加载类的`.class`文件。\n2. **静态变量和静态方法块初始化**：按照代码的顺序，先初始化静态变量，再执行静态代码块。\n3. **实例变量初始化**：按照代码的顺序，先初始化实例变量，再执行实例代码块。\n4. **构造器初始化**：执行构造器，为对象的成员变量赋值。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块1\");\n    }\n\n    static int staticVar = 10; // 静态变量初始化\n\n    {\n        System.out.println(\"实例代码块1\");\n    }\n\n    int instanceVar = 20; // 实例变量初始化\n\n    public MyClass() {\n        System.out.println(\"构造器\");\n    }\n\n    static {\n        System.out.println(\"静态代码块2\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块1\n静态代码块2\n实例代码块1\n构造器\n```\n\n### 总结\n\n- **类初始化**：加载类、静态变量初始化和执行静态代码块。\n- **成员初始化**：包括默认初始化、显式初始化和构造器初始化。\n- **构造器初始化**：通过构造器为对象的成员变量赋值。\n- **数组初始化**：静态初始化和动态初始化。\n- **初始化顺序**：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。\n\n### 5.对象的销毁\n\nJava和c/c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由**Java虚拟机**进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。\n\n#### (1)对象作用域\n\n绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。\n\n`{`\n\n​\t`int a = 11;`\n\n​\t`{`\n\n​\t\t`int b = 22;`\n\n​\t`}`\n\n`}`\n\n变量a会在两个{}中生效，而变量b只在自己的{}内生效。\n\n#### (2)this和super\n\n二者都是关键字。\n\n**this**作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。\n\n调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。![](Java基础复盘/image-20250207203153099.png)\n\nthis用在构造方法时this(参数)需要放在第一行，否则编译不通过。\n\n**super**可以调用父类的方法，属性，指向父类。其他同this。\n\n## 六、访问控制权限\n\n访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。\n\nJava中成员的访问权限一共有四种，分别是public，protected，default，private。如下\n\n![image-20250207211115238](Java基础复盘/image-20250207211115238.png)\n\n### 1.继承\n\n三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。\n\n![image-20250207212537344](Java基础复盘/image-20250207212537344.png)\n\n继承的关键字是**extends**，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：\n\n`class Father{}`\n\n`class Son extends Father{}`\n\n子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。\n\n### 2.多态\n\n三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。\n\n如何实现多态？达成三个充要条件：\n\n- 继承\n- 重写父类方法\n- 父类引用指向子类对象  \n\n比如以下代码：\n\n```java\nclass Fruit{\n    int num;\n\n    public void eat() {\n        System.out.println(\"eat Fruit\");\n    }\n}\nclass Pear extends Fruit{\n    @Override\n    public void eat() {\n        super.num = 10;\n        System.out.println(\"eat\"+num+\"Pear\");\n    }\n}\n\npublic class DuoTai {\n    public static void main(String[] args) {\n        Fruit fruit = new Pear();\n        fruit.eat();\n    }\n}\n```\n\n可以发现main方法中Fruit fruit = new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态->父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。\n\n### 3.组合\n\n组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话**多用组合，少用继承**。二者关系如下：\n\n![image-20250207222214122](Java基础复盘/image-20250207222214122.png)\n\n### 4.代理\n\n代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下代码：\n\n![image-20250207230001660](Java基础复盘/image-20250207230001660.png)\n\n在实际应用中，代理模式可以用于多种场景，例如：\n\n- **远程代理**：为远程对象提供本地代表，以便在不同地址空间中的对象可以像调用本地对象一样调用远程对象。\n- **虚拟代理**：延迟创建开销较大的对象，直到真正需要时才创建。\n- **保护代理**：控制对原始对象的访问，例如，只允许特定用户访问某些方法。\n- **智能引用**：在访问对象时执行额外操作，例如，引用计数、加载持久对象等。\n\n### 5.向上转型\n\n向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。\n\n向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。\n\n向下转型相反而且不是自动完成，需要强制指定。\n\n### 6.statics\n\n`static` 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 `static` 关键字的一些主要用途：\n\n- **静态变量**：定义类的全局变量，所有实例共享。\n- **静态方法**：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。\n- **静态初始化块**：用于初始化静态变量，当类被加载时执行一次。提示程序性能。\n\n### 7.final\n\n`final` 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 `final` 关键字的一些主要用途：\n\n- **最终变量**：一旦被初始化，其值就不能被改变。\n- **最终方法**：不能被子类重写。\n- **最终类**：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。\n\n## 七、接口和抽象类\n\n在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于**定义规范和提供代码复用**，但它们在功能、用途和语法上有很大的区别。\n\n### 一、定义\n\n1. **接口(Interface)**\n   - 接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 `public` 和 `abstract` 的，字段默认是 `public static final` 的。\n   - 接口的目的是定义一组行为规范，**任何实现了该接口的类都必须实现接口中定义的所有方法**。\n   - 接口可以被多个类实现，从而实现多继承的效果。\n2. **抽象类(Abstract Class)**\n   - 抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。\n   - 抽象类的主要目的是**为子类提供一个通用的模板**，**子类必须实现抽象类中的所有抽象方法**。\n   - 抽象类只能被单个类继承，不能实现多继承。\n\n### 二、区别\n\n1. **方法实现**\n   - **接口**：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(`default`)和静态方法(`static`)，但这些方法的使用场景相对有限。\n   - **抽象类**：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。\n2. **字段**\n   - **接口**：接口中的字段默认是 `public static final` 的，即常量。它们必须在声明时初始化，且不能被修改。\n   - **抽象类**：抽象类可以包含普通字段(实例变量)，这些字段可以是 `public`、`protected` 或 `private` 的，也可以是静态的或非静态的。\n3. **继承和实现**\n   - **接口**：一个类可以实现多个接口。这是实现多继承的一种方式。\n   - **抽象类**：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。\n4. **构造方法**\n   - **接口**：接口不能有构造方法，因为接口不能被实例化。\n   - **抽象类**：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。\n5. **实例化**\n   - **接口**：接口不能被实例化。\n   - **抽象类**：抽象类也不能被实例化，但可以通过子类来实例化。\n\n### 三、使用场景\n\n1. **接口**\n   - 当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 `Animal` 接口，其中包含 `eat()` 和 `move()` 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。\n   - 当**需要实现多继承时**，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。\n2. **抽象类**\n   - 当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 `Vehicle` 抽象类，其中包含 `move()` 抽象方法和一些通用字段(如 `speed`、`color` 等)，然后让 `Car`、`Bike` 等子类继承并实现具体的行为。\n   - 当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。\n\n## 八、异常\n\nException位于**java.lang**包下，它是一种顶级接口，继承于**Throwable**类，**Throwable类是Java语言中所以错误(error)和异常(exception)类的父类**。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。\n\n在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。\n\n### 一、异常的分类\n\nJava中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。\n\n1. **受检查的异常(Checked Exception)**\n   - 这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(`FileNotFoundException`)、网络连接失败(`IOException`)等。\n   - 受检查的异常必须在代码中显式处理，否则编译器会报错。\n   - 受检查的异常继承自`Exception`类，但不包括`RuntimeException`及其子类。\n2. **非受检查的异常(Unchecked Exception)**\n   - 这些异常是程序逻辑错误或运行时错误，例如空指针异常(`NullPointerException`)、数组越界异常(`ArrayIndexOutOfBoundsException`)等。\n   - 非受检查的异常继承自`RuntimeException`类，编译器不会强制要求处理这些异常。\n   - 但为了程序的健壮性，通常也会对这些异常进行捕获和处理。\n3. **错误(Error)**\n   - 错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(`VirtualMachineError`)、线程死亡(`ThreadDeath`)等。\n   - 错误继承自`Error`类，通常不需要程序员处理，因为它们通常表示系统级别的问题。\n\n### 二、异常处理机制\n\nJava提供了以下几种机制来处理异常：\n\n1. **try-catch**\n   - `try`块用于包裹可能会抛出异常的代码，`catch`块用于捕获和处理异常。\n   - 可以有多个`catch`块来捕获不同类型的异常。\n2. **finally**\n   - `finally`块用于在`try-catch`块执行完毕后执行清理操作，无论是否捕获到异常，`finally`块都会执行。\n   - 常用于关闭文件流、释放资源等操作。\n3. **throw**\n   - `throw`关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。\n4. **throws**\n   - `throws`关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。\n\n### 三、异常处理的流程\n\n1. **抛出异常**\n   - 当程序运行时遇到错误，会创建一个异常对象并抛出。\n   - 异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。\n2. **捕获异常**\n   - 使用`try-catch`块捕获异常，捕获到异常后可以在`catch`块中进行处理。\n3. **处理异常**\n   - 在`catch`块中可以记录日志、提示用户、尝试恢复等操作。\n4. **清理资源**\n   - 使用`finally`块进行资源清理，确保资源被正确释放。\n\n### 四、示例代码\n\n以下是一个简单的Java异常处理示例：\n\n```java\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        try {\n            // 可能会抛出异常的代码\n            int result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            // 捕获并处理特定类型的异常\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            // 捕获其他类型的异常\n            System.out.println(\"General Error: \" + e.getMessage());\n        } finally {\n            // 无论是否捕获到异常，finally块都会执行\n            System.out.println(\"Finally block executed.\");\n        }\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### 五、自定义异常\n\nJava允许程序员定义自己的异常类，自定义异常类通常继承自`Exception`类或其子类。自定义异常可以提供更具体的错误信息。\n\n```java\npublic class MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            checkAge(15);\n        } catch (MyCustomException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n\n    public static void checkAge(int age) throws MyCustomException {\n        if (age < 18) {\n            throw new MyCustomException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Age is valid.\");\n    }\n}\n```\n\n### 六、如何实践\n\n1. **明确异常的用途**\n   - 受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。\n2. **合理使用`try-catch`**\n   - 不要捕获所有异常，只捕获需要处理的异常。\n3. **避免空的`catch`块**\n   - 捕获异常后应该进行处理，而不是忽略异常。\n4. **使用`finally`块清理资源**\n   - 确保资源被正确释放，避免资源泄漏。\n5. **自定义异常**\n   - 当系统提供的异常类不足以描述错误时，可以定义自定义异常。\n\n### 七、异常处理的优缺点\n\n**优点**\n\n- 提高程序的健壮性，避免程序因错误而崩溃。\n- 提供详细的错误信息，方便调试和修复。\n- 可以通过异常处理机制实现程序的容错机制。\n\n**缺点**\n\n- 异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。\n- 如果滥用异常处理机制，可能会导致程序性能下降。\n\n总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。\n\n## 九、内部类\n\n### 1.创建内部类\n\n## 十、集合\n\n### 1.iterable接口\n\n### 2.顶层接口\n\n### 3.collections类\n\n### 4.集合实现类特征图\n\n## 十一、泛型\n\n## 十二、反射\n\n## 十三、枚举\n\n## 十四、I/O\n\n### 1.File类\n\n### 2.基础IO类和相关方法\n\n## 十五、注解\n\n## 十六、关于null的几种处理方式\n\n","slug":"Java基础复盘","published":1,"_id":"cm6w8oema0003m4otfuzq241x","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"一、Java概述\"><a href=\"#一、Java概述\" class=\"headerlink\" title=\"一、Java概述\"></a>一、Java概述</h2><h3 id=\"1-Java定义\"><a href=\"#1-Java定义\" class=\"headerlink\" title=\"1.Java定义\"></a>1.Java定义</h3><p>由Sun公司于1995发布的一种编程语言和计算平台。</p>\n<p>主要分为三个版本：JavaSE—标准版，JavaEE—企业版，JavaME—微型版。</p>\n<h3 id=\"2-Java特点\"><a href=\"#2-Java特点\" class=\"headerlink\" title=\"2.Java特点\"></a>2.Java特点</h3><p>1.<strong>面向对象</strong>，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。</p>\n<p>2.<strong>静态语言</strong>。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。</p>\n<p>3.<strong>跨平台和可移植性。</strong>已编译的Java程序依靠JVM实现在不同平台能够直接运行。</p>\n<p>4.<strong>容易实现多线程</strong>。在用户空间中实现多线程。</p>\n<p>5.<strong>高性能</strong>。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。</p>\n<p>6.<strong>自动管理对象的生命周期</strong>。安全。</p>\n<p>7.功能强大和简单易用。</p>\n<h2 id=\"二、Java开发环境\"><a href=\"#二、Java开发环境\" class=\"headerlink\" title=\"二、Java开发环境\"></a>二、Java开发环境</h2><p>JDK包括jre和核心类库。jre包括jvm。</p>\n<p>jre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。</p>\n<h2 id=\"三、Java基础语法\"><a href=\"#三、Java基础语法\" class=\"headerlink\" title=\"三、Java基础语法\"></a>三、Java基础语法</h2><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h3><p>四类八种：</p>\n<p>1.整数型：<br>byte一个字节即8位(-128<del>127)，<br>short两个字节即16位(-32768</del>32767)，<br>int4个字节即32位(-2147283648~2147483647)，<br>long八个字节即64位(-9e18-9e18)—后加L</p>\n<p>2.浮点型：<br>float4字节即32位—精确到到小数点后六位—后加f，<br>double8字节即64位精确到小数点后15位—后加d。</p>\n<p>3.字符型：<br>char类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。</p>\n<p>4.布尔型Boolean类型：只有true或false。</p>\n<h3 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h3><p>1.大小写敏感</p>\n<p>2.类名采用大驼峰命名法(即MyClass类似的)</p>\n<p>3.包名小写(网址倒序)</p>\n<p>4方法名采用小驼峰命名法(即myFirstMethod类似的)</p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3.运算符\"></a>3.运算符</h3><p>1.<strong>赋值运算符’&#x3D;‘</strong>，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：</p>\n<ul>\n<li><p><strong>浅拷贝</strong>：复制对象的字段值，但引用类型的字段仍然指向同一个对象。</p>\n</li>\n<li><p><strong>深拷贝</strong>：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。</p>\n</li>\n</ul>\n<p>2.自增自减运算符：</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250201135214019.png\" class=\"\">\n\n<p>3.算数运算符与比较运算符和数学差不多</p>\n<p>4.逻辑运算符与数学差不多，按位运算符比较的是二进制位</p>\n<p>5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：</p>\n<p>​\t8&gt;&gt;1&#x3D;4;9&lt;&lt;2&#x3D;36;</p>\n<p>6.三元运算符：语法为：</p>\n<p>​\t<strong>条件表达式？表达式1：表达式2</strong></p>\n<p>条件表达式为true就调用表达式1，否则调用表达式2.</p>\n<h2 id=\"四、Java执行流程控制\"><a href=\"#四、Java执行流程控制\" class=\"headerlink\" title=\"四、Java执行流程控制\"></a>四、Java执行流程控制</h2><h3 id=\"1-条件语句\"><a href=\"#1-条件语句\" class=\"headerlink\" title=\"1.条件语句\"></a>1.条件语句</h3><p>1.if…else</p>\n<p><code>if(表达式) &#123;</code></p>\n<p>​\t<code>表达式为真执行；</code></p>\n<p><code>&#125;</code></p>\n<p><code>else &#123;</code></p>\n<p>​\t<code>否则执行</code></p>\n<p><code>&#125;</code></p>\n<p>2.switch用于小范围单个值</p>\n<p><code>switch(变量) &#123;</code></p>\n<p>​\t<code>case 值1：</code></p>\n<p>​\t\t<code>表达式1；</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>case 值2：</code></p>\n<p>​\t\t<code>表达式2：</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>......</code></p>\n<p>​\t<code>default：</code></p>\n<p>​\t\t<code>表达式n;</code></p>\n<p>​\t\t<code>break;</code></p>\n<p><code>&#125;</code></p>\n<p>注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的<code>case</code>开始执行，直到遇到<code>break</code>语句或<code>switch</code>块的末尾为止，而不会自动停止。</p>\n<h3 id=\"2-循环语句\"><a href=\"#2-循环语句\" class=\"headerlink\" title=\"2.循环语句\"></a>2.循环语句</h3><p>while，do…while，for和for-each</p>\n<p>while(表达式) {</p>\n<p>​\t为真执行并再次调用while()；</p>\n<p>}</p>\n<p>do {</p>\n<p>​\t第一次直接执行，后续满足表达式执行；</p>\n<p>}while(表达式)；</p>\n<p>for( 初始化;条件 ;步进 ) { 条件为真执行}</p>\n<p>for-each例如:</p>\n<p>​\tint array[]&#x3D;{1,2,3}</p>\n<p>​\tfor(auto arr: array) {</p>\n<p>​\t\tSystem.out.println(arr);</p>\n<p>​\t}</p>\n<p>打印数组。</p>\n<h3 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3.跳转语句\"></a>3.跳转语句</h3><p>有break，continue和return</p>\n<p>break用于退出当前循环</p>\n<p>continue用于退出当次循环进入下一次循环</p>\n<p>return直接结束本次函数调用</p>\n<h2 id=\"五、面向对象\"><a href=\"#五、面向对象\" class=\"headerlink\" title=\"五、面向对象\"></a>五、面向对象</h2><h3 id=\"1-类和对象\"><a href=\"#1-类和对象\" class=\"headerlink\" title=\"1.类和对象\"></a>1.类和对象</h3><p>类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。</p>\n<h3 id=\"2-对象的创建\"><a href=\"#2-对象的创建\" class=\"headerlink\" title=\"2.对象的创建\"></a>2.对象的创建</h3><p>1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：</p>\n<p><code>Car carKey；</code></p>\n<p>但是我们一般在创建对象引用时会同时把一个对象赋给它如：</p>\n<p><code>Car carKey = new Car();</code></p>\n<h3 id=\"3-属性和方法\"><a href=\"#3-属性和方法\" class=\"headerlink\" title=\"3.属性和方法\"></a>3.属性和方法</h3><p>属性也被称为字段，属性可以是对象，也可以是基本数据类型。</p>\n<p>方法也就是函数，意思是做某些事情。</p>\n<p>方法的示例：</p>\n<p>访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){</p>\n<p>​\t方法体;</p>\n<p>} </p>\n<p>如果没有指定修饰符默认同包访问权限(package-private)；</p>\n<h4 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"(1)构造方法\"></a>(1)构造方法</h4><p>构造方法也称构造器，构造函数，它是一种特殊的方法。</p>\n<p>特点：</p>\n<p>1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。</p>\n<p>2.它的方法名称必须和类名相同，</p>\n<p>3.没有返回值类型(连void都没有)。</p>\n<p>4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。</p>\n<p>5.可以重载，只要参数列表不同。</p>\n<p>6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。</p>\n<p>7.构造方法不能被继承或重写，但可以通过<code>super()</code>调用父类的构造方法。</p>\n<h4 id=\"2-方法重载\"><a href=\"#2-方法重载\" class=\"headerlink\" title=\"(2)方法重载\"></a>(2)方法重载</h4><p>方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。</p>\n<h4 id=\"3-方法的重写\"><a href=\"#3-方法的重写\" class=\"headerlink\" title=\"(3)方法的重写\"></a>(3)方法的重写</h4><p>方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。</p>\n<p>要实现方法重写，必须满足以下条件：</p>\n<ol>\n<li><strong>继承关系</strong>：子类必须继承父类。</li>\n<li><strong>方法名和参数列表相同</strong>：子类中的方法必须与父类中的方法具有相同的名称和参数列表。</li>\n<li><strong>返回值类型相同或兼容</strong>：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。</li>\n<li><strong>访问修饰符的限制</strong>：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是<code>public</code>，子类方法不能是<code>protected</code>或<code>private</code>。</li>\n<li><strong>异常声明的限制</strong>：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。</li>\n</ol>\n<h3 id=\"4-初始化\"><a href=\"#4-初始化\" class=\"headerlink\" title=\"4.初始化\"></a>4.初始化</h3><p>在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：</p>\n<h4 id=\"1-类的初始化\"><a href=\"#1-类的初始化\" class=\"headerlink\" title=\"(1) 类的初始化\"></a>(1) 类的初始化</h4><p>类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：</p>\n<ul>\n<li><strong>加载</strong>：将类的<code>.class</code>文件加载到JVM内存中。</li>\n<li><strong>连接</strong>：<ul>\n<li><strong>验证</strong>：检查类的结构是否正确，是否符合Java规范。</li>\n<li><strong>准备</strong>：为类的静态变量分配内存，并设置默认初始值。</li>\n<li><strong>解析</strong>：将类、接口、字段和方法的符号引用转换为直接引用。</li>\n</ul>\n</li>\n<li><strong>初始化</strong>：执行类构造器<code>&lt;clinit&gt;</code>方法，完成静态变量的赋值和静态代码块的执行。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(MyClass.staticVar); <span class=\"comment\">// 触发类的初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块执行</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-成员初始化\"><a href=\"#2-成员初始化\" class=\"headerlink\" title=\"(2) 成员初始化\"></a>(2) 成员初始化</h4><p>成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：</p>\n<ul>\n<li><strong>默认初始化</strong>：由JVM自动为成员变量赋予默认值。例如，<code>int</code>类型默认为<code>0</code>，<code>double</code>类型默认为<code>0.0</code>，<code>boolean</code>类型默认为<code>false</code>，对象引用类型默认为<code>null</code>。</li>\n<li><strong>显式初始化</strong>：在成员变量声明时直接赋值。</li>\n<li><strong>构造器初始化</strong>：通过构造器为成员变量赋值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> anotherVar; <span class=\"comment\">// 默认初始化为0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造器初始化\"><a href=\"#3-构造器初始化\" class=\"headerlink\" title=\"(3) 构造器初始化\"></a>(3) 构造器初始化</h4><p>构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。</p>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> instanceVar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        instanceVar = value; <span class=\"comment\">// 构造器初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(obj.instanceVar); <span class=\"comment\">// 输出100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数组初始化\"><a href=\"#4-数组初始化\" class=\"headerlink\" title=\"(4) 数组初始化\"></a>(4) 数组初始化</h4><p>数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：</p>\n<ul>\n<li><strong>静态初始化</strong>：在声明数组时直接指定数组元素的值。</li>\n<li><strong>动态初始化</strong>：指定数组的长度，由JVM自动为数组元素赋予默认值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>]; <span class=\"comment\">// 默认初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-初始化顺序\"><a href=\"#5-初始化顺序\" class=\"headerlink\" title=\"(5) 初始化顺序\"></a>(5) 初始化顺序</h4><p>Java中对象的初始化顺序如下：</p>\n<ol>\n<li><strong>加载类</strong>：加载类的<code>.class</code>文件。</li>\n<li><strong>静态变量和静态方法块初始化</strong>：按照代码的顺序，先初始化静态变量，再执行静态代码块。</li>\n<li><strong>实例变量初始化</strong>：按照代码的顺序，先初始化实例变量，再执行实例代码块。</li>\n<li><strong>构造器初始化</strong>：执行构造器，为对象的成员变量赋值。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 静态变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实例代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 实例变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块1</span><br><span class=\"line\">静态代码块2</span><br><span class=\"line\">实例代码块1</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>类初始化</strong>：加载类、静态变量初始化和执行静态代码块。</li>\n<li><strong>成员初始化</strong>：包括默认初始化、显式初始化和构造器初始化。</li>\n<li><strong>构造器初始化</strong>：通过构造器为对象的成员变量赋值。</li>\n<li><strong>数组初始化</strong>：静态初始化和动态初始化。</li>\n<li><strong>初始化顺序</strong>：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。</li>\n</ul>\n<h3 id=\"5-对象的销毁\"><a href=\"#5-对象的销毁\" class=\"headerlink\" title=\"5.对象的销毁\"></a>5.对象的销毁</h3><p>Java和c&#x2F;c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由<strong>Java虚拟机</strong>进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。</p>\n<h4 id=\"1-对象作用域\"><a href=\"#1-对象作用域\" class=\"headerlink\" title=\"(1)对象作用域\"></a>(1)对象作用域</h4><p>绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。</p>\n<p><code>&#123;</code></p>\n<p>​\t<code>int a = 11;</code></p>\n<p>​\t<code>&#123;</code></p>\n<p>​\t\t<code>int b = 22;</code></p>\n<p>​\t<code>&#125;</code></p>\n<p><code>&#125;</code></p>\n<p>变量a会在两个{}中生效，而变量b只在自己的{}内生效。</p>\n<h4 id=\"2-this和super\"><a href=\"#2-this和super\" class=\"headerlink\" title=\"(2)this和super\"></a>(2)this和super</h4><p>二者都是关键字。</p>\n<p><strong>this</strong>作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。</p>\n<p>调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207203153099.png\" class=\"\"></p>\n<p>this用在构造方法时this(参数)需要放在第一行，否则编译不通过。</p>\n<p><strong>super</strong>可以调用父类的方法，属性，指向父类。其他同this。</p>\n<h2 id=\"六、访问控制权限\"><a href=\"#六、访问控制权限\" class=\"headerlink\" title=\"六、访问控制权限\"></a>六、访问控制权限</h2><p>访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。</p>\n<p>Java中成员的访问权限一共有四种，分别是public，protected，default，private。如下</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207211115238.png\" class=\"\" title=\"image-20250207211115238\">\n\n<h3 id=\"1-继承\"><a href=\"#1-继承\" class=\"headerlink\" title=\"1.继承\"></a>1.继承</h3><p>三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207212537344.png\" class=\"\" title=\"image-20250207212537344\">\n\n<p>继承的关键字是<strong>extends</strong>，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：</p>\n<p><code>class Father&#123;&#125;</code></p>\n<p><code>class Son extends Father&#123;&#125;</code></p>\n<p>子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2.多态\"></a>2.多态</h3><p>三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。</p>\n<p>如何实现多态？达成三个充要条件：</p>\n<ul>\n<li>继承</li>\n<li>重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n<p>比如以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat Fruit&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pear</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.num = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>+num+<span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuoTai</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pear</span>();</span><br><span class=\"line\">        fruit.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现main方法中Fruit fruit &#x3D; new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态-&gt;父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。</p>\n<h3 id=\"3-组合\"><a href=\"#3-组合\" class=\"headerlink\" title=\"3.组合\"></a>3.组合</h3><p>组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话<strong>多用组合，少用继承</strong>。二者关系如下：</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207222214122.png\" class=\"\" title=\"image-20250207222214122\">\n\n<h3 id=\"4-代理\"><a href=\"#4-代理\" class=\"headerlink\" title=\"4.代理\"></a>4.代理</h3><p>代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下代码：</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207230001660.png\" class=\"\" title=\"image-20250207230001660\">\n\n<p>在实际应用中，代理模式可以用于多种场景，例如：</p>\n<ul>\n<li><strong>远程代理</strong>：为远程对象提供本地代表，以便在不同地址空间中的对象可以像调用本地对象一样调用远程对象。</li>\n<li><strong>虚拟代理</strong>：延迟创建开销较大的对象，直到真正需要时才创建。</li>\n<li><strong>保护代理</strong>：控制对原始对象的访问，例如，只允许特定用户访问某些方法。</li>\n<li><strong>智能引用</strong>：在访问对象时执行额外操作，例如，引用计数、加载持久对象等。</li>\n</ul>\n<h3 id=\"5-向上转型\"><a href=\"#5-向上转型\" class=\"headerlink\" title=\"5.向上转型\"></a>5.向上转型</h3><p>向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。</p>\n<p>向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。</p>\n<p>向下转型相反而且不是自动完成，需要强制指定。</p>\n<h3 id=\"6-statics\"><a href=\"#6-statics\" class=\"headerlink\" title=\"6.statics\"></a>6.statics</h3><p><code>static</code> 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 <code>static</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>静态变量</strong>：定义类的全局变量，所有实例共享。</li>\n<li><strong>静态方法</strong>：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。</li>\n<li><strong>静态初始化块</strong>：用于初始化静态变量，当类被加载时执行一次。提示程序性能。</li>\n</ul>\n<h3 id=\"7-final\"><a href=\"#7-final\" class=\"headerlink\" title=\"7.final\"></a>7.final</h3><p><code>final</code> 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 <code>final</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>最终变量</strong>：一旦被初始化，其值就不能被改变。</li>\n<li><strong>最终方法</strong>：不能被子类重写。</li>\n<li><strong>最终类</strong>：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。</li>\n</ul>\n<h2 id=\"七、接口和抽象类\"><a href=\"#七、接口和抽象类\" class=\"headerlink\" title=\"七、接口和抽象类\"></a>七、接口和抽象类</h2><p>在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于<strong>定义规范和提供代码复用</strong>，但它们在功能、用途和语法上有很大的区别。</p>\n<h3 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h3><ol>\n<li><strong>接口(Interface)</strong><ul>\n<li>接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 <code>public</code> 和 <code>abstract</code> 的，字段默认是 <code>public static final</code> 的。</li>\n<li>接口的目的是定义一组行为规范，<strong>任何实现了该接口的类都必须实现接口中定义的所有方法</strong>。</li>\n<li>接口可以被多个类实现，从而实现多继承的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类(Abstract Class)</strong><ul>\n<li>抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。</li>\n<li>抽象类的主要目的是<strong>为子类提供一个通用的模板</strong>，<strong>子类必须实现抽象类中的所有抽象方法</strong>。</li>\n<li>抽象类只能被单个类继承，不能实现多继承。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h3><ol>\n<li><strong>方法实现</strong><ul>\n<li><strong>接口</strong>：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(<code>default</code>)和静态方法(<code>static</code>)，但这些方法的使用场景相对有限。</li>\n<li><strong>抽象类</strong>：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。</li>\n</ul>\n</li>\n<li><strong>字段</strong><ul>\n<li><strong>接口</strong>：接口中的字段默认是 <code>public static final</code> 的，即常量。它们必须在声明时初始化，且不能被修改。</li>\n<li><strong>抽象类</strong>：抽象类可以包含普通字段(实例变量)，这些字段可以是 <code>public</code>、<code>protected</code> 或 <code>private</code> 的，也可以是静态的或非静态的。</li>\n</ul>\n</li>\n<li><strong>继承和实现</strong><ul>\n<li><strong>接口</strong>：一个类可以实现多个接口。这是实现多继承的一种方式。</li>\n<li><strong>抽象类</strong>：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。</li>\n</ul>\n</li>\n<li><strong>构造方法</strong><ul>\n<li><strong>接口</strong>：接口不能有构造方法，因为接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。</li>\n</ul>\n</li>\n<li><strong>实例化</strong><ul>\n<li><strong>接口</strong>：接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类也不能被实例化，但可以通过子类来实例化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h3><ol>\n<li><strong>接口</strong><ul>\n<li>当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 <code>Animal</code> 接口，其中包含 <code>eat()</code> 和 <code>move()</code> 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。</li>\n<li>当<strong>需要实现多继承时</strong>，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类</strong><ul>\n<li>当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 <code>Vehicle</code> 抽象类，其中包含 <code>move()</code> 抽象方法和一些通用字段(如 <code>speed</code>、<code>color</code> 等)，然后让 <code>Car</code>、<code>Bike</code> 等子类继承并实现具体的行为。</li>\n<li>当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八、异常\"><a href=\"#八、异常\" class=\"headerlink\" title=\"八、异常\"></a>八、异常</h2><p>Exception位于<strong>java.lang</strong>包下，它是一种顶级接口，继承于<strong>Throwable</strong>类，<strong>Throwable类是Java语言中所以错误(error)和异常(exception)类的父类</strong>。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。</p>\n<p>在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。</p>\n<h3 id=\"一、异常的分类\"><a href=\"#一、异常的分类\" class=\"headerlink\" title=\"一、异常的分类\"></a>一、异常的分类</h3><p>Java中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。</p>\n<ol>\n<li><strong>受检查的异常(Checked Exception)</strong><ul>\n<li>这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(<code>FileNotFoundException</code>)、网络连接失败(<code>IOException</code>)等。</li>\n<li>受检查的异常必须在代码中显式处理，否则编译器会报错。</li>\n<li>受检查的异常继承自<code>Exception</code>类，但不包括<code>RuntimeException</code>及其子类。</li>\n</ul>\n</li>\n<li><strong>非受检查的异常(Unchecked Exception)</strong><ul>\n<li>这些异常是程序逻辑错误或运行时错误，例如空指针异常(<code>NullPointerException</code>)、数组越界异常(<code>ArrayIndexOutOfBoundsException</code>)等。</li>\n<li>非受检查的异常继承自<code>RuntimeException</code>类，编译器不会强制要求处理这些异常。</li>\n<li>但为了程序的健壮性，通常也会对这些异常进行捕获和处理。</li>\n</ul>\n</li>\n<li><strong>错误(Error)</strong><ul>\n<li>错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(<code>VirtualMachineError</code>)、线程死亡(<code>ThreadDeath</code>)等。</li>\n<li>错误继承自<code>Error</code>类，通常不需要程序员处理，因为它们通常表示系统级别的问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、异常处理机制\"><a href=\"#二、异常处理机制\" class=\"headerlink\" title=\"二、异常处理机制\"></a>二、异常处理机制</h3><p>Java提供了以下几种机制来处理异常：</p>\n<ol>\n<li><strong>try-catch</strong><ul>\n<li><code>try</code>块用于包裹可能会抛出异常的代码，<code>catch</code>块用于捕获和处理异常。</li>\n<li>可以有多个<code>catch</code>块来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><strong>finally</strong><ul>\n<li><code>finally</code>块用于在<code>try-catch</code>块执行完毕后执行清理操作，无论是否捕获到异常，<code>finally</code>块都会执行。</li>\n<li>常用于关闭文件流、释放资源等操作。</li>\n</ul>\n</li>\n<li><strong>throw</strong><ul>\n<li><code>throw</code>关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。</li>\n</ul>\n</li>\n<li><strong>throws</strong><ul>\n<li><code>throws</code>关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、异常处理的流程\"><a href=\"#三、异常处理的流程\" class=\"headerlink\" title=\"三、异常处理的流程\"></a>三、异常处理的流程</h3><ol>\n<li><strong>抛出异常</strong><ul>\n<li>当程序运行时遇到错误，会创建一个异常对象并抛出。</li>\n<li>异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。</li>\n</ul>\n</li>\n<li><strong>捕获异常</strong><ul>\n<li>使用<code>try-catch</code>块捕获异常，捕获到异常后可以在<code>catch</code>块中进行处理。</li>\n</ul>\n</li>\n<li><strong>处理异常</strong><ul>\n<li>在<code>catch</code>块中可以记录日志、提示用户、尝试恢复等操作。</li>\n</ul>\n</li>\n<li><strong>清理资源</strong><ul>\n<li>使用<code>finally</code>块进行资源清理，确保资源被正确释放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、示例代码\"><a href=\"#四、示例代码\" class=\"headerlink\" title=\"四、示例代码\"></a>四、示例代码</h3><p>以下是一个简单的Java异常处理示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Result: &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理特定类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获其他类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;General Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否捕获到异常，finally块都会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Finally block executed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;Division by zero is not allowed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自定义异常\"><a href=\"#五、自定义异常\" class=\"headerlink\" title=\"五、自定义异常\"></a>五、自定义异常</h3><p>Java允许程序员定义自己的异常类，自定义异常类通常继承自<code>Exception</code>类或其子类。自定义异常可以提供更具体的错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            checkAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyCustomException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Caught custom exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> <span class=\"keyword\">throws</span> MyCustomException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomException</span>(<span class=\"string\">&quot;Age must be at least 18.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age is valid.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、如何实践\"><a href=\"#六、如何实践\" class=\"headerlink\" title=\"六、如何实践\"></a>六、如何实践</h3><ol>\n<li><strong>明确异常的用途</strong><ul>\n<li>受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。</li>\n</ul>\n</li>\n<li><strong>合理使用<code>try-catch</code></strong><ul>\n<li>不要捕获所有异常，只捕获需要处理的异常。</li>\n</ul>\n</li>\n<li><strong>避免空的<code>catch</code>块</strong><ul>\n<li>捕获异常后应该进行处理，而不是忽略异常。</li>\n</ul>\n</li>\n<li><strong>使用<code>finally</code>块清理资源</strong><ul>\n<li>确保资源被正确释放，避免资源泄漏。</li>\n</ul>\n</li>\n<li><strong>自定义异常</strong><ul>\n<li>当系统提供的异常类不足以描述错误时，可以定义自定义异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"七、异常处理的优缺点\"><a href=\"#七、异常处理的优缺点\" class=\"headerlink\" title=\"七、异常处理的优缺点\"></a>七、异常处理的优缺点</h3><p><strong>优点</strong></p>\n<ul>\n<li>提高程序的健壮性，避免程序因错误而崩溃。</li>\n<li>提供详细的错误信息，方便调试和修复。</li>\n<li>可以通过异常处理机制实现程序的容错机制。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。</li>\n<li>如果滥用异常处理机制，可能会导致程序性能下降。</li>\n</ul>\n<p>总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。</p>\n<h2 id=\"九、内部类\"><a href=\"#九、内部类\" class=\"headerlink\" title=\"九、内部类\"></a>九、内部类</h2><h3 id=\"1-创建内部类\"><a href=\"#1-创建内部类\" class=\"headerlink\" title=\"1.创建内部类\"></a>1.创建内部类</h3><h2 id=\"十、集合\"><a href=\"#十、集合\" class=\"headerlink\" title=\"十、集合\"></a>十、集合</h2><h3 id=\"1-iterable接口\"><a href=\"#1-iterable接口\" class=\"headerlink\" title=\"1.iterable接口\"></a>1.iterable接口</h3><h3 id=\"2-顶层接口\"><a href=\"#2-顶层接口\" class=\"headerlink\" title=\"2.顶层接口\"></a>2.顶层接口</h3><h3 id=\"3-collections类\"><a href=\"#3-collections类\" class=\"headerlink\" title=\"3.collections类\"></a>3.collections类</h3><h3 id=\"4-集合实现类特征图\"><a href=\"#4-集合实现类特征图\" class=\"headerlink\" title=\"4.集合实现类特征图\"></a>4.集合实现类特征图</h3><h2 id=\"十一、泛型\"><a href=\"#十一、泛型\" class=\"headerlink\" title=\"十一、泛型\"></a>十一、泛型</h2><h2 id=\"十二、反射\"><a href=\"#十二、反射\" class=\"headerlink\" title=\"十二、反射\"></a>十二、反射</h2><h2 id=\"十三、枚举\"><a href=\"#十三、枚举\" class=\"headerlink\" title=\"十三、枚举\"></a>十三、枚举</h2><h2 id=\"十四、I-O\"><a href=\"#十四、I-O\" class=\"headerlink\" title=\"十四、I&#x2F;O\"></a>十四、I&#x2F;O</h2><h3 id=\"1-File类\"><a href=\"#1-File类\" class=\"headerlink\" title=\"1.File类\"></a>1.File类</h3><h3 id=\"2-基础IO类和相关方法\"><a href=\"#2-基础IO类和相关方法\" class=\"headerlink\" title=\"2.基础IO类和相关方法\"></a>2.基础IO类和相关方法</h3><h2 id=\"十五、注解\"><a href=\"#十五、注解\" class=\"headerlink\" title=\"十五、注解\"></a>十五、注解</h2><h2 id=\"十六、关于null的几种处理方式\"><a href=\"#十六、关于null的几种处理方式\" class=\"headerlink\" title=\"十六、关于null的几种处理方式\"></a>十六、关于null的几种处理方式</h2>","excerpt":"","more":"<h2 id=\"一、Java概述\"><a href=\"#一、Java概述\" class=\"headerlink\" title=\"一、Java概述\"></a>一、Java概述</h2><h3 id=\"1-Java定义\"><a href=\"#1-Java定义\" class=\"headerlink\" title=\"1.Java定义\"></a>1.Java定义</h3><p>由Sun公司于1995发布的一种编程语言和计算平台。</p>\n<p>主要分为三个版本：JavaSE—标准版，JavaEE—企业版，JavaME—微型版。</p>\n<h3 id=\"2-Java特点\"><a href=\"#2-Java特点\" class=\"headerlink\" title=\"2.Java特点\"></a>2.Java特点</h3><p>1.<strong>面向对象</strong>，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。</p>\n<p>2.<strong>静态语言</strong>。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。</p>\n<p>3.<strong>跨平台和可移植性。</strong>已编译的Java程序依靠JVM实现在不同平台能够直接运行。</p>\n<p>4.<strong>容易实现多线程</strong>。在用户空间中实现多线程。</p>\n<p>5.<strong>高性能</strong>。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。</p>\n<p>6.<strong>自动管理对象的生命周期</strong>。安全。</p>\n<p>7.功能强大和简单易用。</p>\n<h2 id=\"二、Java开发环境\"><a href=\"#二、Java开发环境\" class=\"headerlink\" title=\"二、Java开发环境\"></a>二、Java开发环境</h2><p>JDK包括jre和核心类库。jre包括jvm。</p>\n<p>jre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。</p>\n<h2 id=\"三、Java基础语法\"><a href=\"#三、Java基础语法\" class=\"headerlink\" title=\"三、Java基础语法\"></a>三、Java基础语法</h2><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h3><p>四类八种：</p>\n<p>1.整数型：<br>byte一个字节即8位(-128<del>127)，<br>short两个字节即16位(-32768</del>32767)，<br>int4个字节即32位(-2147283648~2147483647)，<br>long八个字节即64位(-9e18-9e18)—后加L</p>\n<p>2.浮点型：<br>float4字节即32位—精确到到小数点后六位—后加f，<br>double8字节即64位精确到小数点后15位—后加d。</p>\n<p>3.字符型：<br>char类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。</p>\n<p>4.布尔型Boolean类型：只有true或false。</p>\n<h3 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h3><p>1.大小写敏感</p>\n<p>2.类名采用大驼峰命名法(即MyClass类似的)</p>\n<p>3.包名小写(网址倒序)</p>\n<p>4方法名采用小驼峰命名法(即myFirstMethod类似的)</p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3.运算符\"></a>3.运算符</h3><p>1.<strong>赋值运算符’&#x3D;‘</strong>，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：</p>\n<ul>\n<li><p><strong>浅拷贝</strong>：复制对象的字段值，但引用类型的字段仍然指向同一个对象。</p>\n</li>\n<li><p><strong>深拷贝</strong>：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。</p>\n</li>\n</ul>\n<p>2.自增自减运算符：</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250201135214019.png\" class=\"\">\n\n<p>3.算数运算符与比较运算符和数学差不多</p>\n<p>4.逻辑运算符与数学差不多，按位运算符比较的是二进制位</p>\n<p>5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：</p>\n<p>​\t8&gt;&gt;1&#x3D;4;9&lt;&lt;2&#x3D;36;</p>\n<p>6.三元运算符：语法为：</p>\n<p>​\t<strong>条件表达式？表达式1：表达式2</strong></p>\n<p>条件表达式为true就调用表达式1，否则调用表达式2.</p>\n<h2 id=\"四、Java执行流程控制\"><a href=\"#四、Java执行流程控制\" class=\"headerlink\" title=\"四、Java执行流程控制\"></a>四、Java执行流程控制</h2><h3 id=\"1-条件语句\"><a href=\"#1-条件语句\" class=\"headerlink\" title=\"1.条件语句\"></a>1.条件语句</h3><p>1.if…else</p>\n<p><code>if(表达式) &#123;</code></p>\n<p>​\t<code>表达式为真执行；</code></p>\n<p><code>&#125;</code></p>\n<p><code>else &#123;</code></p>\n<p>​\t<code>否则执行</code></p>\n<p><code>&#125;</code></p>\n<p>2.switch用于小范围单个值</p>\n<p><code>switch(变量) &#123;</code></p>\n<p>​\t<code>case 值1：</code></p>\n<p>​\t\t<code>表达式1；</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>case 值2：</code></p>\n<p>​\t\t<code>表达式2：</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>......</code></p>\n<p>​\t<code>default：</code></p>\n<p>​\t\t<code>表达式n;</code></p>\n<p>​\t\t<code>break;</code></p>\n<p><code>&#125;</code></p>\n<p>注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的<code>case</code>开始执行，直到遇到<code>break</code>语句或<code>switch</code>块的末尾为止，而不会自动停止。</p>\n<h3 id=\"2-循环语句\"><a href=\"#2-循环语句\" class=\"headerlink\" title=\"2.循环语句\"></a>2.循环语句</h3><p>while，do…while，for和for-each</p>\n<p>while(表达式) {</p>\n<p>​\t为真执行并再次调用while()；</p>\n<p>}</p>\n<p>do {</p>\n<p>​\t第一次直接执行，后续满足表达式执行；</p>\n<p>}while(表达式)；</p>\n<p>for( 初始化;条件 ;步进 ) { 条件为真执行}</p>\n<p>for-each例如:</p>\n<p>​\tint array[]&#x3D;{1,2,3}</p>\n<p>​\tfor(auto arr: array) {</p>\n<p>​\t\tSystem.out.println(arr);</p>\n<p>​\t}</p>\n<p>打印数组。</p>\n<h3 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3.跳转语句\"></a>3.跳转语句</h3><p>有break，continue和return</p>\n<p>break用于退出当前循环</p>\n<p>continue用于退出当次循环进入下一次循环</p>\n<p>return直接结束本次函数调用</p>\n<h2 id=\"五、面向对象\"><a href=\"#五、面向对象\" class=\"headerlink\" title=\"五、面向对象\"></a>五、面向对象</h2><h3 id=\"1-类和对象\"><a href=\"#1-类和对象\" class=\"headerlink\" title=\"1.类和对象\"></a>1.类和对象</h3><p>类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。</p>\n<h3 id=\"2-对象的创建\"><a href=\"#2-对象的创建\" class=\"headerlink\" title=\"2.对象的创建\"></a>2.对象的创建</h3><p>1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：</p>\n<p><code>Car carKey；</code></p>\n<p>但是我们一般在创建对象引用时会同时把一个对象赋给它如：</p>\n<p><code>Car carKey = new Car();</code></p>\n<h3 id=\"3-属性和方法\"><a href=\"#3-属性和方法\" class=\"headerlink\" title=\"3.属性和方法\"></a>3.属性和方法</h3><p>属性也被称为字段，属性可以是对象，也可以是基本数据类型。</p>\n<p>方法也就是函数，意思是做某些事情。</p>\n<p>方法的示例：</p>\n<p>访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){</p>\n<p>​\t方法体;</p>\n<p>} </p>\n<p>如果没有指定修饰符默认同包访问权限(package-private)；</p>\n<h4 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"(1)构造方法\"></a>(1)构造方法</h4><p>构造方法也称构造器，构造函数，它是一种特殊的方法。</p>\n<p>特点：</p>\n<p>1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。</p>\n<p>2.它的方法名称必须和类名相同，</p>\n<p>3.没有返回值类型(连void都没有)。</p>\n<p>4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。</p>\n<p>5.可以重载，只要参数列表不同。</p>\n<p>6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。</p>\n<p>7.构造方法不能被继承或重写，但可以通过<code>super()</code>调用父类的构造方法。</p>\n<h4 id=\"2-方法重载\"><a href=\"#2-方法重载\" class=\"headerlink\" title=\"(2)方法重载\"></a>(2)方法重载</h4><p>方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。</p>\n<h4 id=\"3-方法的重写\"><a href=\"#3-方法的重写\" class=\"headerlink\" title=\"(3)方法的重写\"></a>(3)方法的重写</h4><p>方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。</p>\n<p>要实现方法重写，必须满足以下条件：</p>\n<ol>\n<li><strong>继承关系</strong>：子类必须继承父类。</li>\n<li><strong>方法名和参数列表相同</strong>：子类中的方法必须与父类中的方法具有相同的名称和参数列表。</li>\n<li><strong>返回值类型相同或兼容</strong>：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。</li>\n<li><strong>访问修饰符的限制</strong>：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是<code>public</code>，子类方法不能是<code>protected</code>或<code>private</code>。</li>\n<li><strong>异常声明的限制</strong>：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。</li>\n</ol>\n<h3 id=\"4-初始化\"><a href=\"#4-初始化\" class=\"headerlink\" title=\"4.初始化\"></a>4.初始化</h3><p>在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：</p>\n<h4 id=\"1-类的初始化\"><a href=\"#1-类的初始化\" class=\"headerlink\" title=\"(1) 类的初始化\"></a>(1) 类的初始化</h4><p>类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：</p>\n<ul>\n<li><strong>加载</strong>：将类的<code>.class</code>文件加载到JVM内存中。</li>\n<li><strong>连接</strong>：<ul>\n<li><strong>验证</strong>：检查类的结构是否正确，是否符合Java规范。</li>\n<li><strong>准备</strong>：为类的静态变量分配内存，并设置默认初始值。</li>\n<li><strong>解析</strong>：将类、接口、字段和方法的符号引用转换为直接引用。</li>\n</ul>\n</li>\n<li><strong>初始化</strong>：执行类构造器<code>&lt;clinit&gt;</code>方法，完成静态变量的赋值和静态代码块的执行。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(MyClass.staticVar); <span class=\"comment\">// 触发类的初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块执行</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-成员初始化\"><a href=\"#2-成员初始化\" class=\"headerlink\" title=\"(2) 成员初始化\"></a>(2) 成员初始化</h4><p>成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：</p>\n<ul>\n<li><strong>默认初始化</strong>：由JVM自动为成员变量赋予默认值。例如，<code>int</code>类型默认为<code>0</code>，<code>double</code>类型默认为<code>0.0</code>，<code>boolean</code>类型默认为<code>false</code>，对象引用类型默认为<code>null</code>。</li>\n<li><strong>显式初始化</strong>：在成员变量声明时直接赋值。</li>\n<li><strong>构造器初始化</strong>：通过构造器为成员变量赋值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> anotherVar; <span class=\"comment\">// 默认初始化为0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造器初始化\"><a href=\"#3-构造器初始化\" class=\"headerlink\" title=\"(3) 构造器初始化\"></a>(3) 构造器初始化</h4><p>构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。</p>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> instanceVar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        instanceVar = value; <span class=\"comment\">// 构造器初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(obj.instanceVar); <span class=\"comment\">// 输出100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数组初始化\"><a href=\"#4-数组初始化\" class=\"headerlink\" title=\"(4) 数组初始化\"></a>(4) 数组初始化</h4><p>数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：</p>\n<ul>\n<li><strong>静态初始化</strong>：在声明数组时直接指定数组元素的值。</li>\n<li><strong>动态初始化</strong>：指定数组的长度，由JVM自动为数组元素赋予默认值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>]; <span class=\"comment\">// 默认初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-初始化顺序\"><a href=\"#5-初始化顺序\" class=\"headerlink\" title=\"(5) 初始化顺序\"></a>(5) 初始化顺序</h4><p>Java中对象的初始化顺序如下：</p>\n<ol>\n<li><strong>加载类</strong>：加载类的<code>.class</code>文件。</li>\n<li><strong>静态变量和静态方法块初始化</strong>：按照代码的顺序，先初始化静态变量，再执行静态代码块。</li>\n<li><strong>实例变量初始化</strong>：按照代码的顺序，先初始化实例变量，再执行实例代码块。</li>\n<li><strong>构造器初始化</strong>：执行构造器，为对象的成员变量赋值。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 静态变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实例代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 实例变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块1</span><br><span class=\"line\">静态代码块2</span><br><span class=\"line\">实例代码块1</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>类初始化</strong>：加载类、静态变量初始化和执行静态代码块。</li>\n<li><strong>成员初始化</strong>：包括默认初始化、显式初始化和构造器初始化。</li>\n<li><strong>构造器初始化</strong>：通过构造器为对象的成员变量赋值。</li>\n<li><strong>数组初始化</strong>：静态初始化和动态初始化。</li>\n<li><strong>初始化顺序</strong>：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。</li>\n</ul>\n<h3 id=\"5-对象的销毁\"><a href=\"#5-对象的销毁\" class=\"headerlink\" title=\"5.对象的销毁\"></a>5.对象的销毁</h3><p>Java和c&#x2F;c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由<strong>Java虚拟机</strong>进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。</p>\n<h4 id=\"1-对象作用域\"><a href=\"#1-对象作用域\" class=\"headerlink\" title=\"(1)对象作用域\"></a>(1)对象作用域</h4><p>绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。</p>\n<p><code>&#123;</code></p>\n<p>​\t<code>int a = 11;</code></p>\n<p>​\t<code>&#123;</code></p>\n<p>​\t\t<code>int b = 22;</code></p>\n<p>​\t<code>&#125;</code></p>\n<p><code>&#125;</code></p>\n<p>变量a会在两个{}中生效，而变量b只在自己的{}内生效。</p>\n<h4 id=\"2-this和super\"><a href=\"#2-this和super\" class=\"headerlink\" title=\"(2)this和super\"></a>(2)this和super</h4><p>二者都是关键字。</p>\n<p><strong>this</strong>作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。</p>\n<p>调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207203153099.png\" class=\"\"></p>\n<p>this用在构造方法时this(参数)需要放在第一行，否则编译不通过。</p>\n<p><strong>super</strong>可以调用父类的方法，属性，指向父类。其他同this。</p>\n<h2 id=\"六、访问控制权限\"><a href=\"#六、访问控制权限\" class=\"headerlink\" title=\"六、访问控制权限\"></a>六、访问控制权限</h2><p>访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。</p>\n<p>Java中成员的访问权限一共有四种，分别是public，protected，default，private。如下</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207211115238.png\" class=\"\" title=\"image-20250207211115238\">\n\n<h3 id=\"1-继承\"><a href=\"#1-继承\" class=\"headerlink\" title=\"1.继承\"></a>1.继承</h3><p>三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207212537344.png\" class=\"\" title=\"image-20250207212537344\">\n\n<p>继承的关键字是<strong>extends</strong>，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：</p>\n<p><code>class Father&#123;&#125;</code></p>\n<p><code>class Son extends Father&#123;&#125;</code></p>\n<p>子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2.多态\"></a>2.多态</h3><p>三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。</p>\n<p>如何实现多态？达成三个充要条件：</p>\n<ul>\n<li>继承</li>\n<li>重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n<p>比如以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat Fruit&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pear</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.num = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>+num+<span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuoTai</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pear</span>();</span><br><span class=\"line\">        fruit.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现main方法中Fruit fruit &#x3D; new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态-&gt;父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。</p>\n<h3 id=\"3-组合\"><a href=\"#3-组合\" class=\"headerlink\" title=\"3.组合\"></a>3.组合</h3><p>组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话<strong>多用组合，少用继承</strong>。二者关系如下：</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207222214122.png\" class=\"\" title=\"image-20250207222214122\">\n\n<h3 id=\"4-代理\"><a href=\"#4-代理\" class=\"headerlink\" title=\"4.代理\"></a>4.代理</h3><p>代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下代码：</p>\n<img src=\"/MyPage/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207230001660.png\" class=\"\" title=\"image-20250207230001660\">\n\n<p>在实际应用中，代理模式可以用于多种场景，例如：</p>\n<ul>\n<li><strong>远程代理</strong>：为远程对象提供本地代表，以便在不同地址空间中的对象可以像调用本地对象一样调用远程对象。</li>\n<li><strong>虚拟代理</strong>：延迟创建开销较大的对象，直到真正需要时才创建。</li>\n<li><strong>保护代理</strong>：控制对原始对象的访问，例如，只允许特定用户访问某些方法。</li>\n<li><strong>智能引用</strong>：在访问对象时执行额外操作，例如，引用计数、加载持久对象等。</li>\n</ul>\n<h3 id=\"5-向上转型\"><a href=\"#5-向上转型\" class=\"headerlink\" title=\"5.向上转型\"></a>5.向上转型</h3><p>向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。</p>\n<p>向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。</p>\n<p>向下转型相反而且不是自动完成，需要强制指定。</p>\n<h3 id=\"6-statics\"><a href=\"#6-statics\" class=\"headerlink\" title=\"6.statics\"></a>6.statics</h3><p><code>static</code> 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 <code>static</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>静态变量</strong>：定义类的全局变量，所有实例共享。</li>\n<li><strong>静态方法</strong>：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。</li>\n<li><strong>静态初始化块</strong>：用于初始化静态变量，当类被加载时执行一次。提示程序性能。</li>\n</ul>\n<h3 id=\"7-final\"><a href=\"#7-final\" class=\"headerlink\" title=\"7.final\"></a>7.final</h3><p><code>final</code> 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 <code>final</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>最终变量</strong>：一旦被初始化，其值就不能被改变。</li>\n<li><strong>最终方法</strong>：不能被子类重写。</li>\n<li><strong>最终类</strong>：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。</li>\n</ul>\n<h2 id=\"七、接口和抽象类\"><a href=\"#七、接口和抽象类\" class=\"headerlink\" title=\"七、接口和抽象类\"></a>七、接口和抽象类</h2><p>在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于<strong>定义规范和提供代码复用</strong>，但它们在功能、用途和语法上有很大的区别。</p>\n<h3 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h3><ol>\n<li><strong>接口(Interface)</strong><ul>\n<li>接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 <code>public</code> 和 <code>abstract</code> 的，字段默认是 <code>public static final</code> 的。</li>\n<li>接口的目的是定义一组行为规范，<strong>任何实现了该接口的类都必须实现接口中定义的所有方法</strong>。</li>\n<li>接口可以被多个类实现，从而实现多继承的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类(Abstract Class)</strong><ul>\n<li>抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。</li>\n<li>抽象类的主要目的是<strong>为子类提供一个通用的模板</strong>，<strong>子类必须实现抽象类中的所有抽象方法</strong>。</li>\n<li>抽象类只能被单个类继承，不能实现多继承。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h3><ol>\n<li><strong>方法实现</strong><ul>\n<li><strong>接口</strong>：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(<code>default</code>)和静态方法(<code>static</code>)，但这些方法的使用场景相对有限。</li>\n<li><strong>抽象类</strong>：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。</li>\n</ul>\n</li>\n<li><strong>字段</strong><ul>\n<li><strong>接口</strong>：接口中的字段默认是 <code>public static final</code> 的，即常量。它们必须在声明时初始化，且不能被修改。</li>\n<li><strong>抽象类</strong>：抽象类可以包含普通字段(实例变量)，这些字段可以是 <code>public</code>、<code>protected</code> 或 <code>private</code> 的，也可以是静态的或非静态的。</li>\n</ul>\n</li>\n<li><strong>继承和实现</strong><ul>\n<li><strong>接口</strong>：一个类可以实现多个接口。这是实现多继承的一种方式。</li>\n<li><strong>抽象类</strong>：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。</li>\n</ul>\n</li>\n<li><strong>构造方法</strong><ul>\n<li><strong>接口</strong>：接口不能有构造方法，因为接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。</li>\n</ul>\n</li>\n<li><strong>实例化</strong><ul>\n<li><strong>接口</strong>：接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类也不能被实例化，但可以通过子类来实例化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h3><ol>\n<li><strong>接口</strong><ul>\n<li>当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 <code>Animal</code> 接口，其中包含 <code>eat()</code> 和 <code>move()</code> 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。</li>\n<li>当<strong>需要实现多继承时</strong>，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类</strong><ul>\n<li>当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 <code>Vehicle</code> 抽象类，其中包含 <code>move()</code> 抽象方法和一些通用字段(如 <code>speed</code>、<code>color</code> 等)，然后让 <code>Car</code>、<code>Bike</code> 等子类继承并实现具体的行为。</li>\n<li>当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八、异常\"><a href=\"#八、异常\" class=\"headerlink\" title=\"八、异常\"></a>八、异常</h2><p>Exception位于<strong>java.lang</strong>包下，它是一种顶级接口，继承于<strong>Throwable</strong>类，<strong>Throwable类是Java语言中所以错误(error)和异常(exception)类的父类</strong>。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。</p>\n<p>在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。</p>\n<h3 id=\"一、异常的分类\"><a href=\"#一、异常的分类\" class=\"headerlink\" title=\"一、异常的分类\"></a>一、异常的分类</h3><p>Java中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。</p>\n<ol>\n<li><strong>受检查的异常(Checked Exception)</strong><ul>\n<li>这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(<code>FileNotFoundException</code>)、网络连接失败(<code>IOException</code>)等。</li>\n<li>受检查的异常必须在代码中显式处理，否则编译器会报错。</li>\n<li>受检查的异常继承自<code>Exception</code>类，但不包括<code>RuntimeException</code>及其子类。</li>\n</ul>\n</li>\n<li><strong>非受检查的异常(Unchecked Exception)</strong><ul>\n<li>这些异常是程序逻辑错误或运行时错误，例如空指针异常(<code>NullPointerException</code>)、数组越界异常(<code>ArrayIndexOutOfBoundsException</code>)等。</li>\n<li>非受检查的异常继承自<code>RuntimeException</code>类，编译器不会强制要求处理这些异常。</li>\n<li>但为了程序的健壮性，通常也会对这些异常进行捕获和处理。</li>\n</ul>\n</li>\n<li><strong>错误(Error)</strong><ul>\n<li>错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(<code>VirtualMachineError</code>)、线程死亡(<code>ThreadDeath</code>)等。</li>\n<li>错误继承自<code>Error</code>类，通常不需要程序员处理，因为它们通常表示系统级别的问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、异常处理机制\"><a href=\"#二、异常处理机制\" class=\"headerlink\" title=\"二、异常处理机制\"></a>二、异常处理机制</h3><p>Java提供了以下几种机制来处理异常：</p>\n<ol>\n<li><strong>try-catch</strong><ul>\n<li><code>try</code>块用于包裹可能会抛出异常的代码，<code>catch</code>块用于捕获和处理异常。</li>\n<li>可以有多个<code>catch</code>块来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><strong>finally</strong><ul>\n<li><code>finally</code>块用于在<code>try-catch</code>块执行完毕后执行清理操作，无论是否捕获到异常，<code>finally</code>块都会执行。</li>\n<li>常用于关闭文件流、释放资源等操作。</li>\n</ul>\n</li>\n<li><strong>throw</strong><ul>\n<li><code>throw</code>关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。</li>\n</ul>\n</li>\n<li><strong>throws</strong><ul>\n<li><code>throws</code>关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、异常处理的流程\"><a href=\"#三、异常处理的流程\" class=\"headerlink\" title=\"三、异常处理的流程\"></a>三、异常处理的流程</h3><ol>\n<li><strong>抛出异常</strong><ul>\n<li>当程序运行时遇到错误，会创建一个异常对象并抛出。</li>\n<li>异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。</li>\n</ul>\n</li>\n<li><strong>捕获异常</strong><ul>\n<li>使用<code>try-catch</code>块捕获异常，捕获到异常后可以在<code>catch</code>块中进行处理。</li>\n</ul>\n</li>\n<li><strong>处理异常</strong><ul>\n<li>在<code>catch</code>块中可以记录日志、提示用户、尝试恢复等操作。</li>\n</ul>\n</li>\n<li><strong>清理资源</strong><ul>\n<li>使用<code>finally</code>块进行资源清理，确保资源被正确释放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、示例代码\"><a href=\"#四、示例代码\" class=\"headerlink\" title=\"四、示例代码\"></a>四、示例代码</h3><p>以下是一个简单的Java异常处理示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Result: &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理特定类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获其他类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;General Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否捕获到异常，finally块都会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Finally block executed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;Division by zero is not allowed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自定义异常\"><a href=\"#五、自定义异常\" class=\"headerlink\" title=\"五、自定义异常\"></a>五、自定义异常</h3><p>Java允许程序员定义自己的异常类，自定义异常类通常继承自<code>Exception</code>类或其子类。自定义异常可以提供更具体的错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            checkAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyCustomException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Caught custom exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> <span class=\"keyword\">throws</span> MyCustomException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomException</span>(<span class=\"string\">&quot;Age must be at least 18.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age is valid.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、如何实践\"><a href=\"#六、如何实践\" class=\"headerlink\" title=\"六、如何实践\"></a>六、如何实践</h3><ol>\n<li><strong>明确异常的用途</strong><ul>\n<li>受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。</li>\n</ul>\n</li>\n<li><strong>合理使用<code>try-catch</code></strong><ul>\n<li>不要捕获所有异常，只捕获需要处理的异常。</li>\n</ul>\n</li>\n<li><strong>避免空的<code>catch</code>块</strong><ul>\n<li>捕获异常后应该进行处理，而不是忽略异常。</li>\n</ul>\n</li>\n<li><strong>使用<code>finally</code>块清理资源</strong><ul>\n<li>确保资源被正确释放，避免资源泄漏。</li>\n</ul>\n</li>\n<li><strong>自定义异常</strong><ul>\n<li>当系统提供的异常类不足以描述错误时，可以定义自定义异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"七、异常处理的优缺点\"><a href=\"#七、异常处理的优缺点\" class=\"headerlink\" title=\"七、异常处理的优缺点\"></a>七、异常处理的优缺点</h3><p><strong>优点</strong></p>\n<ul>\n<li>提高程序的健壮性，避免程序因错误而崩溃。</li>\n<li>提供详细的错误信息，方便调试和修复。</li>\n<li>可以通过异常处理机制实现程序的容错机制。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。</li>\n<li>如果滥用异常处理机制，可能会导致程序性能下降。</li>\n</ul>\n<p>总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。</p>\n<h2 id=\"九、内部类\"><a href=\"#九、内部类\" class=\"headerlink\" title=\"九、内部类\"></a>九、内部类</h2><h3 id=\"1-创建内部类\"><a href=\"#1-创建内部类\" class=\"headerlink\" title=\"1.创建内部类\"></a>1.创建内部类</h3><h2 id=\"十、集合\"><a href=\"#十、集合\" class=\"headerlink\" title=\"十、集合\"></a>十、集合</h2><h3 id=\"1-iterable接口\"><a href=\"#1-iterable接口\" class=\"headerlink\" title=\"1.iterable接口\"></a>1.iterable接口</h3><h3 id=\"2-顶层接口\"><a href=\"#2-顶层接口\" class=\"headerlink\" title=\"2.顶层接口\"></a>2.顶层接口</h3><h3 id=\"3-collections类\"><a href=\"#3-collections类\" class=\"headerlink\" title=\"3.collections类\"></a>3.collections类</h3><h3 id=\"4-集合实现类特征图\"><a href=\"#4-集合实现类特征图\" class=\"headerlink\" title=\"4.集合实现类特征图\"></a>4.集合实现类特征图</h3><h2 id=\"十一、泛型\"><a href=\"#十一、泛型\" class=\"headerlink\" title=\"十一、泛型\"></a>十一、泛型</h2><h2 id=\"十二、反射\"><a href=\"#十二、反射\" class=\"headerlink\" title=\"十二、反射\"></a>十二、反射</h2><h2 id=\"十三、枚举\"><a href=\"#十三、枚举\" class=\"headerlink\" title=\"十三、枚举\"></a>十三、枚举</h2><h2 id=\"十四、I-O\"><a href=\"#十四、I-O\" class=\"headerlink\" title=\"十四、I&#x2F;O\"></a>十四、I&#x2F;O</h2><h3 id=\"1-File类\"><a href=\"#1-File类\" class=\"headerlink\" title=\"1.File类\"></a>1.File类</h3><h3 id=\"2-基础IO类和相关方法\"><a href=\"#2-基础IO类和相关方法\" class=\"headerlink\" title=\"2.基础IO类和相关方法\"></a>2.基础IO类和相关方法</h3><h2 id=\"十五、注解\"><a href=\"#十五、注解\" class=\"headerlink\" title=\"十五、注解\"></a>十五、注解</h2><h2 id=\"十六、关于null的几种处理方式\"><a href=\"#十六、关于null的几种处理方式\" class=\"headerlink\" title=\"十六、关于null的几种处理方式\"></a>十六、关于null的几种处理方式</h2>"},{"title":"图片显示测试","date":"2025-02-03T16:00:00.000Z","updated":"2025-02-03T16:00:00.000Z","_content":"### 图片\n1111  \n![示例图片](图片显示测试/image-20250201135214019.png \"logo\")  \n![示例图片](图片显示测试/logo.jpg \"logo\")  \n![示例图片](图片显示测试/image.png \"logo\")  \n\n11111\n\n111111\n","source":"_posts/图片显示测试.md","raw":"---\ntitle: 图片显示测试\ndate: 2025-02-04\nupdated: 2025-02-04\n---\n### 图片\n1111  \n![示例图片](图片显示测试/image-20250201135214019.png \"logo\")  \n![示例图片](图片显示测试/logo.jpg \"logo\")  \n![示例图片](图片显示测试/image.png \"logo\")  \n\n11111\n\n111111\n","slug":"图片显示测试","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6w8oemc0005m4ot3a626ryn","content":"<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>1111  </p>\n<img src=\"/MyPage/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image-20250201135214019.png\" class=\"\" title=\"logo 示例图片\">  \n<img src=\"/MyPage/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/logo.jpg\" class=\"\" title=\"logo 示例图片\">  \n<img src=\"/MyPage/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image.png\" class=\"\" title=\"logo 示例图片\">  \n\n<p>11111</p>\n<p>111111</p>\n","excerpt":"","more":"<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>1111  </p>\n<img src=\"/MyPage/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image-20250201135214019.png\" class=\"\" title=\"logo 示例图片\">  \n<img src=\"/MyPage/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/logo.jpg\" class=\"\" title=\"logo 示例图片\">  \n<img src=\"/MyPage/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image.png\" class=\"\" title=\"logo 示例图片\">  \n\n<p>11111</p>\n<p>111111</p>\n"},{"title":"我的第一篇文章","date":"2025-01-24T16:00:00.000Z","updated":"2025-01-28T16:00:00.000Z","_content":"\n# 测试文章\n是否正常显示  \n# 这是一个一级标题\n\n## 这是一个二级标题\n\n这是一个段落文本。可以包含 **加粗文本**、*斜体文本* 和 [链接](https://blog.csdn.net/qq_73995047?type=blog)。\n\n### 列表\n- 项目 1\n- 项目 2\n  - 子项目 2.1\n- 项目 3\n\n### 图片\n![示例图片](我的第一篇文章/logo.jpg \"logo\")\n","source":"_posts/我的第一篇文章.md","raw":"---\ntitle: 我的第一篇文章\ndate: 2025-01-25\nupdated: 2025-01-29\n---\n\n# 测试文章\n是否正常显示  \n# 这是一个一级标题\n\n## 这是一个二级标题\n\n这是一个段落文本。可以包含 **加粗文本**、*斜体文本* 和 [链接](https://blog.csdn.net/qq_73995047?type=blog)。\n\n### 列表\n- 项目 1\n- 项目 2\n  - 子项目 2.1\n- 项目 3\n\n### 图片\n![示例图片](我的第一篇文章/logo.jpg \"logo\")\n","slug":"我的第一篇文章","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6w8oemd0007m4ot7kya51ss","content":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>是否正常显示  </p>\n<h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><p>这是一个段落文本。可以包含 <strong>加粗文本</strong>、<em>斜体文本</em> 和 <a href=\"https://blog.csdn.net/qq_73995047?type=blog\">链接</a>。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>项目 1</li>\n<li>项目 2<ul>\n<li>子项目 2.1</li>\n</ul>\n</li>\n<li>项目 3</li>\n</ul>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><img src=\"/MyPage/2025/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/logo.jpg\" class=\"\" title=\"logo 示例图片\">\n","excerpt":"","more":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>是否正常显示  </p>\n<h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><p>这是一个段落文本。可以包含 <strong>加粗文本</strong>、<em>斜体文本</em> 和 <a href=\"https://blog.csdn.net/qq_73995047?type=blog\">链接</a>。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>项目 1</li>\n<li>项目 2<ul>\n<li>子项目 2.1</li>\n</ul>\n</li>\n<li>项目 3</li>\n</ul>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><img src=\"/MyPage/2025/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/logo.jpg\" class=\"\" title=\"logo 示例图片\">\n"}],"PostAsset":[{"_id":"source/_posts/Java基础复盘/image-20250201135214019.png","slug":"image-20250201135214019.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207202641150.png","slug":"image-20250207202641150.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207203028138.png","slug":"image-20250207203028138.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207203153099.png","slug":"image-20250207203153099.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207211115238.png","slug":"image-20250207211115238.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207212537344.png","slug":"image-20250207212537344.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207222214122.png","slug":"image-20250207222214122.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207230001660.png","slug":"image-20250207230001660.png","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/Java基础复盘/logo.jpg","slug":"logo.jpg","post":"cm6w8oema0003m4otfuzq241x","modified":0,"renderable":0},{"_id":"source/_posts/图片显示测试/image-20250201135214019.png","slug":"image-20250201135214019.png","post":"cm6w8oemc0005m4ot3a626ryn","modified":0,"renderable":0},{"_id":"source/_posts/图片显示测试/image.png","slug":"image.png","post":"cm6w8oemc0005m4ot3a626ryn","modified":0,"renderable":0},{"_id":"source/_posts/图片显示测试/logo.jpg","slug":"logo.jpg","post":"cm6w8oemc0005m4ot3a626ryn","modified":0,"renderable":0},{"_id":"source/_posts/我的第一篇文章/logo.jpg","slug":"logo.jpg","post":"cm6w8oemd0007m4ot7kya51ss","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}